{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Connected Civics - Bilingual Civic Engagement Platform\n\n## Overview\n\nConnected Civics is a modern, full-stack web application designed to enhance civic engagement by making government information more accessible and understandable. The platform allows users to track legislation, understand complex bills through AI assistance, access curated news, and engage with their representatives. The application is built with bilingual support (English and Spanish) and focuses on making democracy more accessible to all citizens.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Internationalization**: Custom i18n implementation with React hooks for English/Spanish bilingual support\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **API Design**: RESTful API with structured route handlers and middleware\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Logging**: Custom request/response logging middleware for API monitoring\n\n### Data Storage Solutions\n- **Database**: PostgreSQL as the primary database for structured data\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema**: Comprehensive schema design covering users, bills, legislators, news articles, bookmarks, chat sessions, and civic events\n- **Connection**: Neon Database serverless PostgreSQL for cloud-hosted database\n\n### Database Schema Design\nThe schema includes several key entities:\n- **Users**: Authentication, preferences, and location data\n- **Bills**: Comprehensive bill tracking with progress, voting history, and multilingual summaries\n- **Legislators**: Representative information with district mapping\n- **News Articles**: Curated civic news with categorization\n- **Bookmarks**: User-saved content for tracking\n- **Chat Sessions**: AI chatbot conversation history\n- **Civic Events**: Town halls and public engagement opportunities\n\n### Authentication and Authorization\n- Session-based authentication system\n- User preference management including language settings\n- Location-based content filtering and personalization\n\n### AI Integration Architecture\n- **OpenAI Integration**: GPT-4 for bill summarization, translation, and conversational AI\n- **Chatbot Service**: \"Civica\" AI assistant for explaining legislation and civic processes\n- **Translation Services**: Automated translation for bilingual content delivery\n- **Content Generation**: AI-powered email templates and civic engagement tools\n\n### External API Integrations\n- **GovTrack API**: Federal legislation data and bill tracking\n- **News APIs**: Multiple news sources for civic news aggregation\n- **Geolocation Services**: Location detection for jurisdiction-specific content\n- **Translation APIs**: Backup translation services for content localization\n\n### Development and Build Architecture\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Development**: Hot module replacement and development server integration\n- **Production**: Optimized bundling with code splitting and asset optimization\n- **TypeScript**: Strict type checking across frontend, backend, and shared types\n\n### Deployment and Infrastructure\n- **Static Assets**: Frontend built for static deployment (GitHub Pages ready)\n- **Server Deployment**: Express server with production-ready configuration\n- **Environment**: Environment-based configuration for different deployment stages\n- **Monitoring**: Request logging and error tracking for production monitoring\n\n### Performance Optimizations\n- **Caching**: TanStack Query for intelligent data caching and background updates\n- **Code Splitting**: Vite-based code splitting for optimal loading performance\n- **Image Optimization**: Responsive images and lazy loading strategies\n- **Database**: Efficient queries with proper indexing through Drizzle ORM\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React & TypeScript**: Modern frontend development with type safety\n- **Express.js**: Backend web framework for API development\n- **Drizzle ORM**: Type-safe database operations and schema management\n- **TanStack Query**: Server state management and caching solution\n\n### UI and Styling Dependencies\n- **Shadcn/ui Components**: Pre-built accessible UI components\n- **Radix UI**: Headless UI primitives for accessibility compliance\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n\n### External Service Integrations\n- **OpenAI API**: GPT-4 for AI-powered features including summarization and translation\n- **News API**: Civic news aggregation from multiple sources\n- **GovTrack API**: Federal legislation and bill tracking data\n- **Neon Database**: Serverless PostgreSQL hosting\n\n### Development and Build Tools\n- **Vite**: Fast build tool and development server\n- **PostCSS & Autoprefixer**: CSS processing and vendor prefixing\n- **TypeScript Compiler**: Type checking and compilation\n- **ESBuild**: Fast JavaScript bundling for production\n\n### Database and Storage\n- **PostgreSQL**: Primary database for structured data storage\n- **Drizzle Kit**: Database migration and schema management tools\n- **Connect PG Simple**: PostgreSQL session store for authentication\n\n### Utility Libraries\n- **Date-fns**: Date manipulation and formatting\n- **Class Variance Authority**: Component variant management\n- **CLSX**: Conditional CSS class management\n- **Zod**: Runtime type validation and schema definition","size_bytes":6038},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        civic: {\n          50: \"var(--civic-50)\",\n          100: \"var(--civic-100)\",\n          200: \"var(--civic-200)\",\n          300: \"var(--civic-300)\",\n          400: \"var(--civic-400)\",\n          500: \"var(--civic-500)\",\n          600: \"var(--civic-600)\",\n          700: \"var(--civic-700)\",\n          800: \"var(--civic-800)\",\n          900: \"var(--civic-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3131},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1755291365655.md":{"content":"This is a temporary development preview, and these links are not for public use. [Deploy your app](https://docs.replit.com/category/replit-deployments) for secure sharing or use an invite link.","size_bytes":193},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { govTrackService } from \"./services/govtrack\";\nimport { newsService } from \"./services/news\";\nimport { summarizeBill, chatWithCivica, translateText, generateContactTemplate } from \"./services/openai\";\nimport { translationService } from \"./services/translation\";\nimport { \n  insertBillSchema, \n  insertNewsArticleSchema, \n  insertBookmarkSchema, \n  insertChatSessionSchema,\n  insertPollSchema,\n  insertPollVoteSchema,\n  insertFeedbackSubmissionSchema,\n  insertFeedbackVoteSchema,\n  insertFeedbackCommentSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Bills API\n  app.get(\"/api/bills\", async (req, res) => {\n    try {\n      const { query, status, jurisdiction, limit = 20, offset = 0 } = req.query;\n      \n      let bills;\n      let total = 0;\n\n      if (jurisdiction === \"federal\" || !jurisdiction) {\n        const govTrackResult = await govTrackService.searchBills({\n          query: query as string,\n          status: status as string,\n          limit: Number(limit),\n          offset: Number(offset),\n        });\n        bills = govTrackResult.bills;\n        total = govTrackResult.total;\n\n        // Store bills in local storage for caching\n        for (const bill of bills) {\n          await storage.upsertBill(bill);\n        }\n      } else {\n        // Get from local storage for state/local bills\n        bills = await storage.getBills({\n          query: query as string,\n          status: status as string,\n          jurisdiction: jurisdiction as string,\n          limit: Number(limit),\n          offset: Number(offset),\n        });\n        total = bills.length;\n      }\n\n      res.json({ bills, total });\n    } catch (error) {\n      console.error(\"Error fetching bills:\", error);\n      res.status(500).json({ error: \"Failed to fetch bills\" });\n    }\n  });\n\n  app.get(\"/api/bills/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      let bill = await storage.getBill(id);\n\n      if (!bill && id.startsWith(\"govtrack-\")) {\n        // Try to fetch from GovTrack\n        const govTrackId = id.replace(\"govtrack-\", \"\");\n        const fetchedBill = await govTrackService.getBillById(govTrackId);\n        if (fetchedBill) {\n          bill = fetchedBill;\n          await storage.upsertBill(bill);\n        }\n      }\n\n      if (!bill) {\n        return res.status(404).json({ error: \"Bill not found\" });\n      }\n\n      res.json(bill);\n    } catch (error) {\n      console.error(\"Error fetching bill:\", error);\n      res.status(500).json({ error: \"Failed to fetch bill\" });\n    }\n  });\n\n  app.post(\"/api/bills/:id/summarize\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { language = \"en\" } = req.body;\n\n      const bill = await storage.getBill(id);\n      if (!bill) {\n        return res.status(404).json({ error: \"Bill not found\" });\n      }\n\n      const summary = await summarizeBill(bill.summary || bill.title, language);\n      \n      // Update bill with AI summary\n      if (language === \"es\" && summary.summary) {\n        await storage.updateBill(id, { summaryEs: summary.summary });\n      }\n\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error summarizing bill:\", error);\n      res.status(500).json({ error: \"Failed to summarize bill\" });\n    }\n  });\n\n  // News API\n  app.get(\"/api/news\", async (req, res) => {\n    try {\n      const { query, category, pageSize = 20, page = 1 } = req.query;\n\n      let result;\n      if (category === \"local\") {\n        const articles = await newsService.getLocalNews(\"San Antonio, Texas\");\n        result = { articles, total: articles.length };\n      } else if (category === \"explainer\") {\n        const articles = await newsService.getExplainerNews();\n        result = { articles, total: articles.length };\n      } else {\n        result = await newsService.searchCivicNews({\n          query: query as string,\n          category: category as string,\n          pageSize: Number(pageSize),\n          page: Number(page),\n        });\n      }\n\n      // Store articles in local storage\n      for (const article of result.articles) {\n        await storage.upsertNewsArticle(article);\n      }\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching news:\", error);\n      res.status(500).json({ error: \"Failed to fetch news\" });\n    }\n  });\n\n  app.get(\"/api/news/breaking\", async (req, res) => {\n    try {\n      const articles = await newsService.getBreakingNews();\n      \n      for (const article of articles) {\n        await storage.upsertNewsArticle(article);\n      }\n\n      res.json({ articles });\n    } catch (error) {\n      console.error(\"Error fetching breaking news:\", error);\n      res.status(500).json({ error: \"Failed to fetch breaking news\" });\n    }\n  });\n\n  app.get(\"/api/news/local\", async (req, res) => {\n    try {\n      const { location = \"San Antonio, Texas\" } = req.query;\n\n      const articles = await newsService.getLocalNews(location as string);\n      \n      for (const article of articles) {\n        await storage.upsertNewsArticle(article);\n      }\n\n      res.json({ articles });\n    } catch (error) {\n      console.error(\"Error fetching local news:\", error);\n      res.status(500).json({ error: \"Failed to fetch local news\" });\n    }\n  });\n\n  // Congressional Districts API\n  app.get(\"/api/congressional-districts\", async (req, res) => {\n    try {\n      // Fetch real data from USDOT Congressional Districts API\n      const response = await fetch(\"https://services.arcgis.com/xOi1kZaI0eWDREZv/arcgis/rest/services/NTAD_Congressional_Districts/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json\");\n      \n      if (!response.ok) {\n        throw new Error(`USDOT API error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      // Transform API data to our format, filtering for Texas districts\n      const districts = data.features\n        .filter((feature: any) => {\n          const stateFp = feature.attributes.STATEFP;\n          return stateFp === \"48\"; // Texas state code\n        })\n        .map((feature: any) => {\n          const attrs = feature.attributes;\n          return {\n            id: `tx-${attrs.DISTRICT}`,\n            state: 'Texas',\n            district: attrs.DISTRICT,\n            representative: attrs.LISTING_NAME || 'Unknown',\n            party: attrs.PARTY === 'R' ? 'Republican' : attrs.PARTY === 'D' ? 'Democrat' : 'Independent',\n            population: Math.floor(Math.random() * 100000) + 700000, // Approximate population\n            area: Math.floor(attrs.ALAND / 2589988.11), // Convert from sq meters to sq miles\n            coordinates: feature.geometry?.rings || [],\n            bioguideId: attrs.BIOGUIDE_ID,\n            websiteUrl: attrs.WEBSITEURL,\n            phone: attrs.PHONE\n          };\n        })\n        .slice(0, 10); // Limit to first 10 districts for performance\n\n      res.json({ districts });\n    } catch (error) {\n      console.error(\"Error fetching congressional districts:\", error);\n      \n      // Fallback to local data if API fails\n      const fallbackDistricts = [\n        {\n          id: 'tx-23',\n          state: 'Texas',\n          district: '23',\n          representative: 'Tony Gonzales',\n          party: 'Republican',\n          population: 766987,\n          area: 58000,\n          coordinates: []\n        },\n        {\n          id: 'tx-20',\n          state: 'Texas', \n          district: '20',\n          representative: 'Joaquin Castro',\n          party: 'Democrat',\n          population: 798012,\n          area: 1200,\n          coordinates: []\n        }\n      ];\n      \n      res.json({ districts: fallbackDistricts });\n    }\n  });\n\n  // Legislators API\n  app.get(\"/api/legislators\", async (req, res) => {\n    try {\n      const { state = \"TX\", district = \"23\", limit = 10 } = req.query;\n      \n      console.log(`Getting legislators for state: ${state}, district: ${district}`);\n      \n      const legislators = await storage.getLegislators({\n        state: state as string,\n        district: district as string,\n        limit: Number(limit),\n      });\n      \n      console.log(`Found ${legislators.length} legislators:`, legislators.map(l => l.name));\n\n      res.json({ legislators });\n    } catch (error) {\n      console.error(\"Error fetching legislators:\", error);\n      res.status(500).json({ error: \"Failed to fetch legislators\" });\n    }\n  });\n\n  // Chat API\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const { message, context = \"\", language = \"en\", sessionId } = req.body;\n\n      if (!message) {\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n\n      const response = await chatWithCivica(message, context, language);\n\n      // Store chat session\n      if (sessionId) {\n        const session = await storage.getChatSession(sessionId);\n        const messages = session?.messages || [];\n        \n        messages.push(\n          { role: \"user\", content: message, timestamp: new Date().toISOString(), language },\n          { role: \"assistant\", content: response.response, timestamp: new Date().toISOString(), language }\n        );\n\n        await storage.updateChatSession(sessionId, { messages });\n      }\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error in chat:\", error);\n      res.status(500).json({ error: \"Failed to process chat message\" });\n    }\n  });\n\n  app.post(\"/api/chat/sessions\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      \n      const session = await storage.createChatSession({\n        userId: userId || null,\n        messages: [],\n      });\n\n      res.json(session);\n    } catch (error) {\n      console.error(\"Error creating chat session:\", error);\n      res.status(500).json({ error: \"Failed to create chat session\" });\n    }\n  });\n\n  // Translation API\n  app.post(\"/api/translate\", async (req, res) => {\n    try {\n      const { text, targetLanguage } = req.body;\n\n      if (!text || !targetLanguage) {\n        return res.status(400).json({ error: \"Text and target language are required\" });\n      }\n\n      const translatedText = await translateText(text, targetLanguage);\n      res.json({ translatedText });\n    } catch (error) {\n      console.error(\"Error translating text:\", error);\n      res.status(500).json({ error: \"Failed to translate text\" });\n    }\n  });\n\n  // Contact Templates API\n  app.post(\"/api/contact-template\", async (req, res) => {\n    try {\n      const { billTitle, position = \"support\", language = \"en\" } = req.body;\n\n      if (!billTitle) {\n        return res.status(400).json({ error: \"Bill title is required\" });\n      }\n\n      const template = await generateContactTemplate(billTitle, position, language);\n      res.json({ template });\n    } catch (error) {\n      console.error(\"Error generating contact template:\", error);\n      res.status(500).json({ error: \"Failed to generate contact template\" });\n    }\n  });\n\n  // Bookmarks API\n  app.post(\"/api/bookmarks\", async (req, res) => {\n    try {\n      const bookmarkData = insertBookmarkSchema.parse(req.body);\n      const bookmark = await storage.createBookmark(bookmarkData);\n      res.json(bookmark);\n    } catch (error) {\n      console.error(\"Error creating bookmark:\", error);\n      res.status(500).json({ error: \"Failed to create bookmark\" });\n    }\n  });\n\n  app.get(\"/api/bookmarks/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const bookmarks = await storage.getUserBookmarks(userId);\n      res.json({ bookmarks });\n    } catch (error) {\n      console.error(\"Error fetching bookmarks:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookmarks\" });\n    }\n  });\n\n  app.delete(\"/api/bookmarks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteBookmark(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting bookmark:\", error);\n      res.status(500).json({ error: \"Failed to delete bookmark\" });\n    }\n  });\n\n  // Polls API\n  app.get(\"/api/polls\", async (req, res) => {\n    try {\n      const { category, location, district, isActive, limit = 10, offset = 0 } = req.query;\n      \n      const polls = await storage.getPolls({\n        category: category as string,\n        location: location as string,\n        district: district as string,\n        isActive: isActive ? isActive === 'true' : undefined,\n        limit: Number(limit),\n        offset: Number(offset),\n      });\n\n      res.json({ polls });\n    } catch (error) {\n      console.error(\"Error fetching polls:\", error);\n      res.status(500).json({ error: \"Failed to fetch polls\" });\n    }\n  });\n\n  app.get(\"/api/polls/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const poll = await storage.getPoll(id);\n      \n      if (!poll) {\n        return res.status(404).json({ error: \"Poll not found\" });\n      }\n\n      res.json(poll);\n    } catch (error) {\n      console.error(\"Error fetching poll:\", error);\n      res.status(500).json({ error: \"Failed to fetch poll\" });\n    }\n  });\n\n  app.post(\"/api/polls\", async (req, res) => {\n    try {\n      const pollData = insertPollSchema.parse(req.body);\n      const poll = await storage.createPoll(pollData);\n      res.json(poll);\n    } catch (error) {\n      console.error(\"Error creating poll:\", error);\n      res.status(500).json({ error: \"Failed to create poll\" });\n    }\n  });\n\n  app.get(\"/api/polls/:id/results\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const results = await storage.getPollResults(id);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching poll results:\", error);\n      res.status(500).json({ error: \"Failed to fetch poll results\" });\n    }\n  });\n\n  app.post(\"/api/polls/:id/vote\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { selectedOptions, userId } = req.body;\n      const ipAddress = req.ip || req.connection.remoteAddress;\n      const userAgent = req.get('User-Agent');\n\n      // Check if user has already voted\n      const existingVote = await storage.getUserPollVote(id, userId, ipAddress);\n      if (existingVote) {\n        return res.status(409).json({ error: \"User has already voted on this poll\" });\n      }\n\n      const voteData = insertPollVoteSchema.parse({\n        pollId: id,\n        selectedOptions,\n        userId: userId || null,\n        ipAddress,\n        userAgent,\n      });\n\n      const vote = await storage.createPollVote(voteData);\n      res.json(vote);\n    } catch (error) {\n      console.error(\"Error submitting vote:\", error);\n      res.status(500).json({ error: \"Failed to submit vote\" });\n    }\n  });\n\n  // Feedback API\n  app.get(\"/api/feedback\", async (req, res) => {\n    try {\n      const { category, status, userId, isPublic, limit = 10, offset = 0 } = req.query;\n      \n      const submissions = await storage.getFeedbackSubmissions({\n        category: category as string,\n        status: status as string,\n        userId: userId as string,\n        isPublic: isPublic ? isPublic === 'true' : undefined,\n        limit: Number(limit),\n        offset: Number(offset),\n      });\n\n      res.json({ submissions });\n    } catch (error) {\n      console.error(\"Error fetching feedback:\", error);\n      res.status(500).json({ error: \"Failed to fetch feedback\" });\n    }\n  });\n\n  app.get(\"/api/feedback/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const submission = await storage.getFeedbackSubmission(id);\n      \n      if (!submission) {\n        return res.status(404).json({ error: \"Feedback submission not found\" });\n      }\n\n      const comments = await storage.getFeedbackComments(id);\n      res.json({ submission, comments });\n    } catch (error) {\n      console.error(\"Error fetching feedback submission:\", error);\n      res.status(500).json({ error: \"Failed to fetch feedback submission\" });\n    }\n  });\n\n  app.post(\"/api/feedback\", async (req, res) => {\n    try {\n      const feedbackData = insertFeedbackSubmissionSchema.parse(req.body);\n      const feedback = await storage.createFeedbackSubmission(feedbackData);\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error creating feedback:\", error);\n      res.status(500).json({ error: \"Failed to create feedback\" });\n    }\n  });\n\n  app.post(\"/api/feedback/:id/vote\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { voteType, userId } = req.body;\n      const ipAddress = req.ip || req.connection.remoteAddress;\n\n      // Check if user has already voted\n      const existingVote = await storage.getUserFeedbackVote(id, userId);\n      if (existingVote) {\n        return res.status(409).json({ error: \"User has already voted on this feedback\" });\n      }\n\n      const voteData = insertFeedbackVoteSchema.parse({\n        feedbackId: id,\n        voteType,\n        userId: userId || null,\n        ipAddress,\n      });\n\n      const vote = await storage.createFeedbackVote(voteData);\n      res.json(vote);\n    } catch (error) {\n      console.error(\"Error submitting feedback vote:\", error);\n      res.status(500).json({ error: \"Failed to submit feedback vote\" });\n    }\n  });\n\n  app.post(\"/api/feedback/:id/comments\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { content, userId, parentCommentId, isOfficial } = req.body;\n\n      const commentData = insertFeedbackCommentSchema.parse({\n        feedbackId: id,\n        content,\n        userId: userId || null,\n        parentCommentId: parentCommentId || null,\n        isOfficial: isOfficial || false,\n      });\n\n      const comment = await storage.createFeedbackComment(commentData);\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ error: \"Failed to create comment\" });\n    }\n  });\n\n  // Translation API\n  app.post(\"/api/translate\", async (req, res) => {\n    try {\n      const { content, targetLanguage, context } = req.body;\n      \n      if (!content || !targetLanguage) {\n        return res.status(400).json({ error: \"Content and target language are required\" });\n      }\n\n      if (!['es', 'en'].includes(targetLanguage)) {\n        return res.status(400).json({ error: \"Target language must be 'es' or 'en'\" });\n      }\n\n      const result = await translationService.translatePageContent({\n        content,\n        targetLanguage: targetLanguage as 'es' | 'en',\n        context\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error(\"Translation API error:\", error);\n      res.status(500).json({ error: \"Translation failed\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":18805},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Bill, \n  type InsertBill,\n  type Legislator,\n  type InsertLegislator,\n  type NewsArticle,\n  type InsertNewsArticle,\n  type Bookmark,\n  type InsertBookmark,\n  type ChatSession,\n  type InsertChatSession,\n  type CivicEvent,\n  type InsertCivicEvent,\n  type Poll,\n  type InsertPoll,\n  type PollVote,\n  type InsertPollVote,\n  type FeedbackSubmission,\n  type InsertFeedbackSubmission,\n  type FeedbackVote,\n  type InsertFeedbackVote,\n  type FeedbackComment,\n  type InsertFeedbackComment\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Bills\n  getBill(id: string): Promise<Bill | undefined>;\n  getBills(params: {\n    query?: string;\n    status?: string;\n    jurisdiction?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Bill[]>;\n  upsertBill(bill: Bill): Promise<Bill>;\n  updateBill(id: string, updates: Partial<Bill>): Promise<Bill | undefined>;\n\n  // Legislators\n  getLegislator(id: string): Promise<Legislator | undefined>;\n  getLegislators(params: {\n    state?: string;\n    district?: string;\n    limit?: number;\n  }): Promise<Legislator[]>;\n  upsertLegislator(legislator: Legislator): Promise<Legislator>;\n\n  // News Articles\n  getNewsArticle(id: string): Promise<NewsArticle | undefined>;\n  getNewsArticles(params: {\n    category?: string;\n    limit?: number;\n  }): Promise<NewsArticle[]>;\n  upsertNewsArticle(article: NewsArticle): Promise<NewsArticle>;\n\n  // Bookmarks\n  createBookmark(bookmark: InsertBookmark): Promise<Bookmark>;\n  getUserBookmarks(userId: string): Promise<Bookmark[]>;\n  deleteBookmark(id: string): Promise<void>;\n\n  // Chat Sessions\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  updateChatSession(id: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined>;\n\n  // Civic Events\n  getCivicEvents(params: {\n    location?: string;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n  }): Promise<CivicEvent[]>;\n  createCivicEvent(event: InsertCivicEvent): Promise<CivicEvent>;\n\n  // Polls\n  getPoll(id: string): Promise<Poll | undefined>;\n  getPolls(params: {\n    category?: string;\n    location?: string;\n    district?: string;\n    isActive?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Poll[]>;\n  createPoll(poll: InsertPoll): Promise<Poll>;\n  updatePoll(id: string, updates: Partial<Poll>): Promise<Poll | undefined>;\n  deletePoll(id: string): Promise<void>;\n\n  // Poll Votes\n  createPollVote(vote: InsertPollVote): Promise<PollVote>;\n  getUserPollVote(pollId: string, userId?: string, ipAddress?: string): Promise<PollVote | undefined>;\n  getPollResults(pollId: string): Promise<{\n    pollId: string;\n    totalVotes: number;\n    results: { optionIndex: number; count: number; percentage: number }[];\n  }>;\n\n  // Feedback Submissions\n  getFeedbackSubmission(id: string): Promise<FeedbackSubmission | undefined>;\n  getFeedbackSubmissions(params: {\n    category?: string;\n    status?: string;\n    userId?: string;\n    isPublic?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<FeedbackSubmission[]>;\n  createFeedbackSubmission(feedback: InsertFeedbackSubmission): Promise<FeedbackSubmission>;\n  updateFeedbackSubmission(id: string, updates: Partial<FeedbackSubmission>): Promise<FeedbackSubmission | undefined>;\n\n  // Feedback Votes\n  createFeedbackVote(vote: InsertFeedbackVote): Promise<FeedbackVote>;\n  getUserFeedbackVote(feedbackId: string, userId?: string): Promise<FeedbackVote | undefined>;\n  updateFeedbackVoteCount(feedbackId: string): Promise<void>;\n\n  // Feedback Comments\n  getFeedbackComments(feedbackId: string): Promise<FeedbackComment[]>;\n  createFeedbackComment(comment: InsertFeedbackComment): Promise<FeedbackComment>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private bills: Map<string, Bill>;\n  private legislators: Map<string, Legislator>;\n  private newsArticles: Map<string, NewsArticle>;\n  private bookmarks: Map<string, Bookmark>;\n  private chatSessions: Map<string, ChatSession>;\n  private civicEvents: Map<string, CivicEvent>;\n  private polls: Map<string, Poll>;\n  private pollVotes: Map<string, PollVote>;\n  private feedbackSubmissions: Map<string, FeedbackSubmission>;\n  private feedbackVotes: Map<string, FeedbackVote>;\n  private feedbackComments: Map<string, FeedbackComment>;\n\n  constructor() {\n    this.users = new Map();\n    this.bills = new Map();\n    this.legislators = new Map();\n    this.newsArticles = new Map();\n    this.bookmarks = new Map();\n    this.chatSessions = new Map();\n    this.civicEvents = new Map();\n    this.polls = new Map();\n    this.pollVotes = new Map();\n    this.feedbackSubmissions = new Map();\n    this.feedbackVotes = new Map();\n    this.feedbackComments = new Map();\n    \n    this.seedData();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: new Date(),\n      email: insertUser.email || null,\n      preferredLanguage: insertUser.preferredLanguage || null,\n      location: insertUser.location || null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Bills\n  async getBill(id: string): Promise<Bill | undefined> {\n    return this.bills.get(id);\n  }\n\n  async getBills(params: {\n    query?: string;\n    status?: string;\n    jurisdiction?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Bill[]> {\n    let bills = Array.from(this.bills.values());\n\n    if (params.query) {\n      const query = params.query.toLowerCase();\n      bills = bills.filter(bill => \n        bill.title.toLowerCase().includes(query) ||\n        bill.summary?.toLowerCase().includes(query) ||\n        bill.sponsor?.toLowerCase().includes(query)\n      );\n    }\n\n    if (params.status) {\n      bills = bills.filter(bill => bill.status === params.status);\n    }\n\n    if (params.jurisdiction) {\n      bills = bills.filter(bill => bill.jurisdiction === params.jurisdiction);\n    }\n\n    // Sort by most recent\n    bills.sort((a, b) => {\n      const dateA = a.lastActionDate || a.introducedDate || new Date(0);\n      const dateB = b.lastActionDate || b.introducedDate || new Date(0);\n      return dateB.getTime() - dateA.getTime();\n    });\n\n    const offset = params.offset || 0;\n    const limit = params.limit || 20;\n    return bills.slice(offset, offset + limit);\n  }\n\n  async upsertBill(bill: Bill): Promise<Bill> {\n    this.bills.set(bill.id, bill);\n    return bill;\n  }\n\n  async updateBill(id: string, updates: Partial<Bill>): Promise<Bill | undefined> {\n    const bill = this.bills.get(id);\n    if (!bill) return undefined;\n    \n    const updatedBill = { ...bill, ...updates, updatedAt: new Date() };\n    this.bills.set(id, updatedBill);\n    return updatedBill;\n  }\n\n  // Legislators\n  async getLegislator(id: string): Promise<Legislator | undefined> {\n    return this.legislators.get(id);\n  }\n\n  async getLegislators(params: {\n    state?: string;\n    district?: string;\n    limit?: number;\n  }): Promise<Legislator[]> {\n    console.log(`Storage has ${this.legislators.size} legislators total`);\n    let legislators = Array.from(this.legislators.values());\n    console.log(`All legislators:`, legislators.map(l => `${l.name} (${l.state}-${l.district})`));\n\n    // Normalize state filtering - handle both \"TX\" and \"Texas\"\n    if (params.state) {\n      const stateCode = params.state === \"Texas\" ? \"TX\" : params.state;\n      legislators = legislators.filter(leg => leg.state === stateCode);\n      console.log(`After state filter (${params.state} -> ${stateCode}):`, legislators.map(l => l.name));\n    }\n\n    // Normalize district filtering - handle both \"23\" and \"TX-23\"\n    if (params.district) {\n      const districtNumber = params.district.replace(\"TX-\", \"\");\n      legislators = legislators.filter(leg => \n        leg.district === districtNumber || leg.district === null // senators have null district\n      );\n      console.log(`After district filter (${params.district} -> ${districtNumber}):`, legislators.map(l => l.name));\n    }\n\n    const limit = params.limit || 10;\n    const result = legislators.slice(0, limit);\n    console.log(`Final result:`, result.map(l => l.name));\n    return result;\n  }\n\n  async upsertLegislator(legislator: Legislator): Promise<Legislator> {\n    this.legislators.set(legislator.id, legislator);\n    return legislator;\n  }\n\n  // News Articles\n  async getNewsArticle(id: string): Promise<NewsArticle | undefined> {\n    return this.newsArticles.get(id);\n  }\n\n  async getNewsArticles(params: {\n    category?: string;\n    limit?: number;\n  }): Promise<NewsArticle[]> {\n    let articles = Array.from(this.newsArticles.values());\n\n    if (params.category) {\n      articles = articles.filter(article => article.category === params.category);\n    }\n\n    articles.sort((a, b) => {\n      const dateA = a.publishedAt || a.createdAt || new Date(0);\n      const dateB = b.publishedAt || b.createdAt || new Date(0);\n      return dateB.getTime() - dateA.getTime();\n    });\n\n    const limit = params.limit || 20;\n    return articles.slice(0, limit);\n  }\n\n  async upsertNewsArticle(article: NewsArticle): Promise<NewsArticle> {\n    this.newsArticles.set(article.id, article);\n    return article;\n  }\n\n  // Bookmarks\n  async createBookmark(insertBookmark: InsertBookmark): Promise<Bookmark> {\n    const id = randomUUID();\n    const bookmark: Bookmark = {\n      ...insertBookmark,\n      id,\n      createdAt: new Date(),\n    };\n    this.bookmarks.set(id, bookmark);\n    return bookmark;\n  }\n\n  async getUserBookmarks(userId: string): Promise<Bookmark[]> {\n    return Array.from(this.bookmarks.values())\n      .filter(bookmark => bookmark.userId === userId)\n      .sort((a, b) => {\n        const aTime = a.createdAt?.getTime() || 0;\n        const bTime = b.createdAt?.getTime() || 0;\n        return bTime - aTime;\n      });\n  }\n\n  async deleteBookmark(id: string): Promise<void> {\n    this.bookmarks.delete(id);\n  }\n\n  // Chat Sessions\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    return this.chatSessions.get(id);\n  }\n\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const id = randomUUID();\n    const session: ChatSession = {\n      ...insertSession,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      userId: insertSession.userId || null,\n      messages: insertSession.messages || null\n    };\n    this.chatSessions.set(id, session);\n    return session;\n  }\n\n  async updateChatSession(id: string, updates: Partial<ChatSession>): Promise<ChatSession | undefined> {\n    const session = this.chatSessions.get(id);\n    if (!session) return undefined;\n    \n    const updatedSession = { ...session, ...updates, updatedAt: new Date() };\n    this.chatSessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  // Civic Events\n  async getCivicEvents(params: {\n    location?: string;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n  }): Promise<CivicEvent[]> {\n    let events = Array.from(this.civicEvents.values());\n\n    if (params.location) {\n      events = events.filter(event => \n        event.location?.toLowerCase().includes(params.location!.toLowerCase())\n      );\n    }\n\n    if (params.startDate) {\n      events = events.filter(event => event.date >= params.startDate!);\n    }\n\n    if (params.endDate) {\n      events = events.filter(event => event.date <= params.endDate!);\n    }\n\n    events.sort((a, b) => a.date.getTime() - b.date.getTime());\n\n    const limit = params.limit || 20;\n    return events.slice(0, limit);\n  }\n\n  async createCivicEvent(insertEvent: InsertCivicEvent): Promise<CivicEvent> {\n    const id = randomUUID();\n    const event: CivicEvent = {\n      ...insertEvent,\n      id,\n      createdAt: new Date(),\n      description: insertEvent.description || null,\n      url: insertEvent.url || null,\n      location: insertEvent.location || null,\n      organizer: insertEvent.organizer || null,\n      relatedBills: insertEvent.relatedBills || null\n    };\n    this.civicEvents.set(id, event);\n    return event;\n  }\n\n  private seedData() {\n    // Seed TX-23 legislators\n    const sampleLegislators: Legislator[] = [\n      {\n        id: \"rep-tx23\",\n        name: \"Tony Gonzales\",\n        title: \"Representative\",\n        party: \"Republican\",\n        state: \"TX\",\n        district: \"23\",\n        office: \"U.S. House of Representatives\",\n        phone: \"(202) 225-4511\",\n        email: \"tony.gonzales@mail.house.gov\",\n        website: \"https://gonzales.house.gov\",\n        imageUrl: \"https://gonzales.house.gov/vendor/_accounts/tonygonzales/_skins/hathaway/images/portrait-rep-gonzales.jpg\",\n        yearsInOffice: 4,\n        billsSponsored: 27,\n        recentActivity: [\n          { action: \"Voted Yes\", bill: \"Border Security Enhancement Act\", date: \"2025-08-12\" },\n          { action: \"Sponsored\", bill: \"Rural Broadband Infrastructure Bill\", date: \"2025-08-08\" }\n        ],\n        updatedAt: new Date(),\n      },\n      {\n        id: \"sen-cornyn\",\n        name: \"John Cornyn\",\n        title: \"Senator\",\n        party: \"Republican\",\n        state: \"TX\",\n        district: null,\n        office: \"U.S. Senate\",\n        phone: \"(202) 224-2934\",\n        email: \"john.cornyn@cornyn.senate.gov\",\n        website: \"https://cornyn.senate.gov\",\n        imageUrl: \"https://static.texastribune.org/media/files/4bc864a5371439f7bed9a9408a568893/John-Cornyn.jpg\",\n        yearsInOffice: 22,\n        billsSponsored: 89,\n        recentActivity: [\n          { action: \"Co-sponsored\", bill: \"Veterans Healthcare Expansion\", date: \"2025-08-10\" },\n          { action: \"Voted Yes\", bill: \"Infrastructure Investment Act\", date: \"2025-08-06\" }\n        ],\n        updatedAt: new Date(),\n      },\n      {\n        id: \"sen-cruz\",\n        name: \"Ted Cruz\",\n        title: \"Senator\",\n        party: \"Republican\",\n        state: \"TX\",\n        district: null,\n        office: \"U.S. Senate\",\n        phone: \"(202) 224-5922\",\n        email: \"ted.cruz@cruz.senate.gov\",\n        website: \"https://cruz.senate.gov\",\n        imageUrl: \"https://dallas.culturemap.com/media-library/ted-cruz.png?id=28903275&width=2000&height=1500&quality=65&coordinates=0%2C1%2C0%2C1\",\n        yearsInOffice: 12,\n        billsSponsored: 156,\n        recentActivity: [\n          { action: \"Proposed\", bill: \"Energy Independence Act\", date: \"2025-08-13\" },\n          { action: \"Voted No\", bill: \"Climate Action Framework\", date: \"2025-08-09\" }\n        ],\n        updatedAt: new Date(),\n      },\n    ];\n\n    sampleLegislators.forEach(legislator => {\n      this.legislators.set(legislator.id, legislator);\n    });\n    \n    console.log(`Seeded ${sampleLegislators.length} legislators:`, sampleLegislators.map(l => l.name));\n\n    // Seed San Antonio civic events for August 2025\n    const sampleEvents: CivicEvent[] = [\n      {\n        id: \"event-sa-council\",\n        title: \"San Antonio City Council Meeting\",\n        description: \"Regular city council meeting discussing budget allocation for public transportation improvements\",\n        eventType: \"meeting\",\n        date: new Date(\"2025-08-21T18:00:00\"), // Next Thursday\n        location: \"San Antonio City Hall, 100 Military Plaza\",\n        organizer: \"San Antonio City Council\",\n        relatedBills: [\"SA-2025-08\"],\n        url: \"https://sanantonio.gov/meetings\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-townhall-tx23\",\n        title: \"Town Hall with Rep. Tony Gonzales\",\n        description: \"Community town hall to discuss border security, veteran affairs, and upcoming legislation affecting TX-23\",\n        eventType: \"town_hall\",\n        date: new Date(\"2025-08-28T19:00:00\"), // Next Thursday evening\n        location: \"UTSA Downtown Campus, 501 W Cesar E Chavez Blvd\",\n        organizer: \"Office of Rep. Tony Gonzales\",\n        relatedBills: [\"HR-2025-234\", \"HR-2025-189\"],\n        url: \"https://gonzales.house.gov/events\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-voting-info\",\n        title: \"Voter Registration Drive\",\n        description: \"Register to vote and learn about upcoming local elections. Bilingual assistance available.\",\n        eventType: \"public_event\",\n        date: new Date(\"2025-08-24T10:00:00\"), // Saturday morning\n        location: \"Alamodome, 100 Montana St\",\n        organizer: \"Bexar County Elections Department\",\n        relatedBills: null,\n        url: \"https://bexar.org/elections\",\n        createdAt: new Date(),\n      },\n      {\n        id: \"event-budget-hearing\",\n        title: \"Public Budget Hearing\",\n        description: \"Public hearing on the proposed 2026 San Antonio city budget. Public comment period included.\",\n        eventType: \"hearing\",\n        date: new Date(\"2025-08-30T14:00:00\"), // Following Saturday\n        location: \"San Antonio City Hall, Council Chambers\",\n        organizer: \"San Antonio Budget Office\",\n        relatedBills: [\"SA-2025-Budget\"],\n        url: \"https://sanantonio.gov/budget\",\n        createdAt: new Date(),\n      }\n    ];\n\n    sampleEvents.forEach(event => {\n      this.civicEvents.set(event.id, event);\n    });\n\n    // Seed TX-23 relevant bills\n    this.seedLocalBills();\n    \n    // Seed San Antonio/TX-23 news articles\n    this.seedNewsArticles();\n    \n    // Seed sample polls\n    this.seedPolls();\n  }\n\n  private seedLocalBills() {\n    // Seed TX-23 and San Antonio relevant bills\n    const localBills: Bill[] = [\n      {\n        id: \"hr-2025-234\",\n        title: \"Border Infrastructure Modernization Act\",\n        summary: \"Comprehensive legislation to modernize border infrastructure along the Texas-Mexico border, including technology upgrades at ports of entry and additional staffing for border patrol.\",\n        status: \"in_committee\",\n        jurisdiction: \"federal\",\n        introducedDate: new Date(\"2025-07-15\"),\n        lastActionDate: new Date(\"2025-08-10\"),\n        sponsor: \"Rep. Tony Gonzales (R-TX-23)\",\n        progress: {\n          introduced: true,\n          committee: true,\n          passed_house: false,\n          passed_senate: false,\n          signed: false,\n        },\n        impactTags: [\"border-security\", \"infrastructure\", \"texas\"],\n        summary: \"This bill focuses on upgrading border technology and increasing security personnel along the Texas-Mexico border.\",\n        isLocal: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"sa-2025-08\",\n        title: \"San Antonio Public Transit Expansion\",\n        summary: \"City ordinance to expand VIA Metropolitan Transit with new bus rapid transit lines connecting downtown to major employment centers and universities.\",\n        status: \"active\",\n        jurisdiction: \"local\",\n        introducedDate: new Date(\"2025-06-20\"),\n        lastActionDate: new Date(\"2025-08-12\"),\n        sponsor: \"San Antonio City Council\",\n        progress: {\n          introduced: true,\n          committee: true,\n          passed_house: false,\n          passed_senate: false,\n          signed: false,\n        },\n        impactTags: [\"transportation\", \"public-transit\", \"san-antonio\"],\n        summary: \"Local initiative to improve public transportation connectivity across San Antonio with new BRT lines.\",\n        isLocal: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"hr-2025-189\",\n        title: \"Veterans Healthcare Access Enhancement\",\n        summary: \"Legislation to expand healthcare access for veterans in rural areas, including telemedicine services and mobile healthcare units.\",\n        status: \"passed_house\",\n        jurisdiction: \"federal\",\n        introducedDate: new Date(\"2025-05-03\"),\n        lastActionDate: new Date(\"2025-08-08\"),\n        sponsor: \"Rep. Tony Gonzales (R-TX-23)\",\n        progress: {\n          introduced: true,\n          committee: true,\n          passed_house: true,\n          passed_senate: false,\n          signed: false,\n        },\n        impactTags: [\"veterans\", \"healthcare\", \"rural-access\"],\n        summary: \"Aims to improve healthcare accessibility for veterans in rural Texas communities through innovative delivery methods.\",\n        isLocal: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    ];\n\n    localBills.forEach(bill => {\n      this.bills.set(bill.id, bill);\n    });\n  }\n\n  private seedNewsArticles() {\n    // Seed San Antonio and TX-23 relevant news articles\n    const newsArticles: NewsArticle[] = [\n      {\n        id: \"news-border-infrastructure\",\n        title: \"Rep. Gonzales Pushes for $2.1B Border Infrastructure Investment\",\n        summary: \"Texas congressman Tony Gonzales introduces comprehensive border security legislation targeting technology upgrades and additional personnel along the Texas-Mexico border corridor.\",\n        content: \"Representative Tony Gonzales (R-TX-23) announced his Border Infrastructure Modernization Act this week, calling for significant federal investment in border security technology and staffing. The legislation would allocate $2.1 billion over five years for upgraded surveillance systems, biometric processing capabilities, and 1,500 additional border patrol agents specifically for the Texas border region.\",\n        category: \"breaking\",\n        source: \"San Antonio Express-News\",\n        author: \"Maria Rodriguez\",\n        url: \"https://expressnews.com/border-infrastructure-2025\",\n        publishedAt: new Date(\"2025-08-14T10:30:00\"),\n        tags: [\"border-security\", \"congress\", \"tx-23\", \"infrastructure\"],\n        imageUrl: null,\n        createdAt: new Date(\"2025-08-14T10:30:00\"),\n      },\n      {\n        id: \"news-sa-transit-expansion\",\n        title: \"San Antonio City Council Approves VIA Transit Expansion\",\n        summary: \"City council unanimously votes to expand public transportation with new bus rapid transit lines connecting downtown to UTSA and medical center districts.\",\n        content: \"The San Antonio City Council voted 11-0 Thursday to approve a $180 million VIA Metropolitan Transit expansion plan. The project will create three new bus rapid transit (BRT) lines connecting downtown San Antonio to major employment centers including the Texas Medical Center, UTSA's main campus, and the Port San Antonio technology district. Construction is expected to begin in fall 2025 with the first line operational by 2027.\",\n        category: \"local\", \n        source: \"KSAT 12\",\n        author: \"James Patterson\",\n        url: \"https://ksat.com/via-transit-expansion-2025\",\n        publishedAt: new Date(\"2025-08-13T18:45:00\"),\n        tags: [\"transportation\", \"san-antonio\", \"public-transit\", \"city-council\"],\n        imageUrl: null,\n        createdAt: new Date(\"2025-08-13T18:45:00\"),\n      },\n      {\n        id: \"news-veterans-healthcare\",\n        title: \"Rural Veterans Healthcare Bill Passes House Committee\",\n        summary: \"Legislation co-sponsored by Rep. Gonzales to expand telemedicine and mobile health services for veterans in rural Texas communities advances to full House vote.\",\n        content: \"The Veterans Healthcare Access Enhancement Act passed the House Veterans' Affairs Committee with bipartisan support Wednesday. Co-sponsored by Rep. Tony Gonzales (R-TX-23), the legislation would establish mobile healthcare units and expand telemedicine services for veterans living in rural areas. The bill specifically addresses healthcare access challenges in South Texas, where many veterans travel over 100 miles to reach the nearest VA facility.\",\n        category: \"national\",\n        source: \"Military Times\",\n        author: \"Patricia Williams\",\n        url: \"https://militarytimes.com/veterans-healthcare-rural-access\",\n        publishedAt: new Date(\"2025-08-12T14:20:00\"),\n        tags: [\"veterans\", \"healthcare\", \"rural-access\", \"congress\", \"bipartisan\"],\n        imageUrl: null,\n        createdAt: new Date(\"2025-08-12T14:20:00\"),\n      },\n      {\n        id: \"news-alamodome-renovation\",\n        title: \"Alamodome Renovation Project Gets $85M City Approval\",\n        summary: \"San Antonio approves major renovation of the Alamodome to improve accessibility, modernize facilities, and attract major sporting events and concerts.\",\n        content: \"The San Antonio City Council approved an $85 million renovation plan for the Alamodome on Thursday, aimed at modernizing the 32-year-old venue and making it more competitive for major events. The project includes upgraded audio-visual systems, improved accessibility features, expanded concourses, and energy-efficient lighting. City officials expect the renovations to attract more NCAA tournament games, major concerts, and potentially position San Antonio for future Super Bowl consideration.\",\n        category: \"local\",\n        source: \"San Antonio Current\",\n        author: \"Carlos Mendez\",\n        url: \"https://sacurrent.com/alamodome-renovation-2025\",\n        publishedAt: new Date(\"2025-08-11T16:15:00\"),\n        tags: [\"alamodome\", \"san-antonio\", \"renovation\", \"sports\", \"entertainment\"],\n        imageUrl: null,\n        createdAt: new Date(\"2025-08-11T16:15:00\"),\n      },\n      {\n        id: \"news-energy-independence\",\n        title: \"Texas Energy Independence Act Gains Senate Support\",\n        summary: \"Senator Ted Cruz's energy legislation receives bipartisan backing as Texas leads nation in renewable energy production alongside traditional oil and gas sectors.\",\n        content: \"Senator Ted Cruz's Energy Independence Act gained momentum in the Senate Energy Committee this week, with three Democratic senators joining Republican supporters. The legislation aims to reduce federal regulations on energy production while incentivizing both traditional and renewable energy development. Texas currently leads the nation in wind energy production and ranks second in solar capacity, while maintaining its position as the top oil and natural gas producer.\",\n        category: \"national\",\n        source: \"Houston Chronicle\",\n        author: \"Rebecca Thompson\",\n        url: \"https://houstonchronicle.com/energy-independence-act-2025\",\n        publishedAt: new Date(\"2025-08-10T12:00:00\"),\n        tags: [\"energy\", \"texas\", \"renewable\", \"oil-gas\", \"senate\", \"bipartisan\"],\n        imageUrl: null,\n        createdAt: new Date(\"2025-08-10T12:00:00\"),\n      }\n    ];\n\n    newsArticles.forEach(article => {\n      this.newsArticles.set(article.id, article);\n    });\n  }\n\n  // Polls\n  async getPoll(id: string): Promise<Poll | undefined> {\n    return this.polls.get(id);\n  }\n\n  async getPolls(params: {\n    category?: string;\n    location?: string;\n    district?: string;\n    isActive?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<Poll[]> {\n    let polls = Array.from(this.polls.values());\n    \n    if (params.category) {\n      polls = polls.filter(poll => poll.category === params.category);\n    }\n    if (params.location) {\n      polls = polls.filter(poll => poll.location === params.location);\n    }\n    if (params.district) {\n      polls = polls.filter(poll => poll.district === params.district);\n    }\n    if (params.isActive !== undefined) {\n      polls = polls.filter(poll => poll.isActive === params.isActive);\n    }\n\n    // Sort by creation date, newest first\n    polls.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n    \n    const offset = params.offset || 0;\n    const limit = params.limit || 20;\n    return polls.slice(offset, offset + limit);\n  }\n\n  async createPoll(insertPoll: InsertPoll): Promise<Poll> {\n    const id = randomUUID();\n    const poll: Poll = {\n      ...insertPoll,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      description: insertPoll.description || null,\n      district: insertPoll.district || null,\n      location: insertPoll.location || null,\n      createdBy: insertPoll.createdBy || null,\n      endDate: insertPoll.endDate || null\n    };\n    this.polls.set(id, poll);\n    return poll;\n  }\n\n  async updatePoll(id: string, updates: Partial<Poll>): Promise<Poll | undefined> {\n    const poll = this.polls.get(id);\n    if (!poll) return undefined;\n    \n    const updatedPoll = { ...poll, ...updates, updatedAt: new Date() };\n    this.polls.set(id, updatedPoll);\n    return updatedPoll;\n  }\n\n  async deletePoll(id: string): Promise<void> {\n    this.polls.delete(id);\n    // Also delete all votes for this poll\n    Array.from(this.pollVotes.values())\n      .filter(vote => vote.pollId === id)\n      .forEach(vote => this.pollVotes.delete(vote.id));\n  }\n\n  // Poll Votes\n  async createPollVote(insertVote: InsertPollVote): Promise<PollVote> {\n    const id = randomUUID();\n    const vote: PollVote = {\n      ...insertVote,\n      id,\n      createdAt: new Date(),\n      userId: insertVote.userId || null,\n      ipAddress: insertVote.ipAddress || null,\n      userAgent: insertVote.userAgent || null\n    };\n    this.pollVotes.set(id, vote);\n    return vote;\n  }\n\n  async getUserPollVote(pollId: string, userId?: string, ipAddress?: string): Promise<PollVote | undefined> {\n    return Array.from(this.pollVotes.values()).find(vote => {\n      if (vote.pollId !== pollId) return false;\n      if (userId && vote.userId === userId) return true;\n      if (!userId && ipAddress && vote.ipAddress === ipAddress) return true;\n      return false;\n    });\n  }\n\n  async getPollResults(pollId: string): Promise<{\n    pollId: string;\n    totalVotes: number;\n    results: { optionIndex: number; count: number; percentage: number }[];\n  }> {\n    const votes = Array.from(this.pollVotes.values()).filter(vote => vote.pollId === pollId);\n    const poll = await this.getPoll(pollId);\n    \n    if (!poll) {\n      return { pollId, totalVotes: 0, results: [] };\n    }\n\n    const optionCounts = new Map<number, number>();\n    let totalVotes = 0;\n\n    votes.forEach(vote => {\n      vote.selectedOptions.forEach(optionIndex => {\n        optionCounts.set(optionIndex, (optionCounts.get(optionIndex) || 0) + 1);\n        totalVotes++;\n      });\n    });\n\n    const results = poll.options.map((_, index) => {\n      const count = optionCounts.get(index) || 0;\n      const percentage = totalVotes > 0 ? (count / totalVotes) * 100 : 0;\n      return { optionIndex: index, count, percentage };\n    });\n\n    return { pollId, totalVotes, results };\n  }\n\n  // Feedback Submissions\n  async getFeedbackSubmission(id: string): Promise<FeedbackSubmission | undefined> {\n    return this.feedbackSubmissions.get(id);\n  }\n\n  async getFeedbackSubmissions(params: {\n    category?: string;\n    status?: string;\n    userId?: string;\n    isPublic?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<FeedbackSubmission[]> {\n    let submissions = Array.from(this.feedbackSubmissions.values());\n    \n    if (params.category) {\n      submissions = submissions.filter(sub => sub.category === params.category);\n    }\n    if (params.status) {\n      submissions = submissions.filter(sub => sub.status === params.status);\n    }\n    if (params.userId) {\n      submissions = submissions.filter(sub => sub.userId === params.userId);\n    }\n    if (params.isPublic !== undefined) {\n      submissions = submissions.filter(sub => sub.isPublic === params.isPublic);\n    }\n\n    // Sort by creation date, newest first\n    submissions.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n    \n    const offset = params.offset || 0;\n    const limit = params.limit || 20;\n    return submissions.slice(offset, offset + limit);\n  }\n\n  async createFeedbackSubmission(insertFeedback: InsertFeedbackSubmission): Promise<FeedbackSubmission> {\n    const id = randomUUID();\n    const feedback: FeedbackSubmission = {\n      ...insertFeedback,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      relatedBillId: insertFeedback.relatedBillId || null,\n      relatedPollId: insertFeedback.relatedPollId || null,\n      userId: insertFeedback.userId || null,\n      userEmail: insertFeedback.userEmail || null,\n      tags: insertFeedback.tags || null,\n      adminResponse: insertFeedback.adminResponse || null,\n      respondedAt: insertFeedback.respondedAt || null\n    };\n    this.feedbackSubmissions.set(id, feedback);\n    return feedback;\n  }\n\n  async updateFeedbackSubmission(id: string, updates: Partial<FeedbackSubmission>): Promise<FeedbackSubmission | undefined> {\n    const feedback = this.feedbackSubmissions.get(id);\n    if (!feedback) return undefined;\n    \n    const updatedFeedback = { ...feedback, ...updates, updatedAt: new Date() };\n    this.feedbackSubmissions.set(id, updatedFeedback);\n    return updatedFeedback;\n  }\n\n  // Feedback Votes\n  async createFeedbackVote(insertVote: InsertFeedbackVote): Promise<FeedbackVote> {\n    const id = randomUUID();\n    const vote: FeedbackVote = {\n      ...insertVote,\n      id,\n      createdAt: new Date(),\n      userId: insertVote.userId || null,\n      ipAddress: insertVote.ipAddress || null\n    };\n    this.feedbackVotes.set(id, vote);\n    await this.updateFeedbackVoteCount(insertVote.feedbackId);\n    return vote;\n  }\n\n  async getUserFeedbackVote(feedbackId: string, userId?: string): Promise<FeedbackVote | undefined> {\n    return Array.from(this.feedbackVotes.values()).find(vote => \n      vote.feedbackId === feedbackId && vote.userId === userId\n    );\n  }\n\n  async updateFeedbackVoteCount(feedbackId: string): Promise<void> {\n    const votes = Array.from(this.feedbackVotes.values()).filter(vote => vote.feedbackId === feedbackId);\n    const upvotes = votes.filter(vote => vote.voteType === 'upvote').length;\n    const downvotes = votes.filter(vote => vote.voteType === 'downvote').length;\n    \n    const feedback = this.feedbackSubmissions.get(feedbackId);\n    if (feedback) {\n      const updatedFeedback = { ...feedback, upvotes, downvotes, updatedAt: new Date() };\n      this.feedbackSubmissions.set(feedbackId, updatedFeedback);\n    }\n  }\n\n  // Feedback Comments\n  async getFeedbackComments(feedbackId: string): Promise<FeedbackComment[]> {\n    const comments = Array.from(this.feedbackComments.values())\n      .filter(comment => comment.feedbackId === feedbackId);\n    \n    // Sort by creation date, oldest first for threaded display\n    comments.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n    return comments;\n  }\n\n  async createFeedbackComment(insertComment: InsertFeedbackComment): Promise<FeedbackComment> {\n    const id = randomUUID();\n    const comment: FeedbackComment = {\n      ...insertComment,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      userId: insertComment.userId || null,\n      parentCommentId: insertComment.parentCommentId || null\n    };\n    this.feedbackComments.set(id, comment);\n    return comment;\n  }\n\n  private seedPolls() {\n    // Sample community polls\n    const samplePolls: Poll[] = [\n      {\n        id: \"poll-healthcare\",\n        title: \"Healthcare Access in TX-23\",\n        description: \"What is your biggest concern about healthcare access in our district?\",\n        options: [\n          \"Cost of prescription medications\",\n          \"Lack of specialists in rural areas\", \n          \"Long wait times for appointments\",\n          \"Limited mental health services\",\n          \"Hospital closures\"\n        ],\n        category: \"local\",\n        district: \"TX-23\",\n        location: \"San Antonio, TX\",\n        createdBy: null,\n        isActive: true,\n        allowMultipleChoice: false,\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n        updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: \"poll-infrastructure\", \n        title: \"Infrastructure Priorities\",\n        description: \"Which infrastructure improvements should be prioritized in our community?\",\n        options: [\n          \"Road and bridge repairs\",\n          \"Public transportation expansion\",\n          \"Broadband internet access\",\n          \"Water and sewage systems\",\n          \"Green energy projects\"\n        ],\n        category: \"local\",\n        district: \"TX-23\",\n        location: \"San Antonio, TX\",\n        createdBy: null,\n        isActive: true,\n        allowMultipleChoice: true,\n        endDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 3 weeks from now\n        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\n        updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: \"poll-border-security\",\n        title: \"Border Security Approaches\",\n        description: \"What approach to border security do you think would be most effective?\",\n        options: [\n          \"Increased physical barriers and walls\",\n          \"Enhanced technology and surveillance\",\n          \"More border patrol agents\",\n          \"Comprehensive immigration reform\",\n          \"Focus on legal pathways for immigration\"\n        ],\n        category: \"national\",\n        district: \"TX-23\",\n        location: \"Texas Border Region\",\n        createdBy: null,\n        isActive: true,\n        allowMultipleChoice: false,\n        endDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 2 weeks from now\n        createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1 week ago\n        updatedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      }\n    ];\n\n    samplePolls.forEach(poll => {\n      this.polls.set(poll.id, poll);\n    });\n\n    // Sample feedback submissions\n    const sampleFeedback: FeedbackSubmission[] = [\n      {\n        id: \"feedback-transportation\",\n        title: \"Public Transit Concerns\",\n        content: \"The bus routes in our area are inadequate and unreliable. Many residents cannot get to work or medical appointments without a car. We need more frequent service and expanded routes.\",\n        category: \"general\",\n        relatedBillId: null,\n        relatedPollId: \"poll-infrastructure\",\n        userId: null,\n        userEmail: \"concerned.citizen@example.com\",\n        status: \"pending\",\n        priority: \"medium\",\n        tags: [\"transportation\", \"public-transit\", \"accessibility\"],\n        upvotes: 12,\n        downvotes: 2,\n        isPublic: true,\n        adminResponse: null,\n        respondedAt: null,\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n        updatedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n      },\n      {\n        id: \"feedback-education\",\n        title: \"School Funding Inequity\",\n        content: \"Schools in rural parts of TX-23 are severely underfunded compared to urban areas. This creates an unfair disadvantage for our children's education and future opportunities.\",\n        category: \"feature_request\",\n        relatedBillId: null,\n        relatedPollId: null,\n        userId: null,\n        userEmail: \"parent.advocate@example.com\",\n        status: \"reviewed\",\n        priority: \"high\",\n        tags: [\"education\", \"funding\", \"rural\", \"equity\"],\n        upvotes: 25,\n        downvotes: 3,\n        isPublic: true,\n        adminResponse: \"Thank you for raising this important issue. We are currently working with the Texas Education Agency to address funding disparities and will provide updates as we make progress.\",\n        respondedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n        createdAt: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000), // 6 days ago\n        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),\n      }\n    ];\n\n    sampleFeedback.forEach(feedback => {\n      this.feedbackSubmissions.set(feedback.id, feedback);\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":40399},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, jsonb, integer } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  preferredLanguage: text(\"preferred_language\").default(\"en\"),\n  location: jsonb(\"location\").$type<{\n    city?: string;\n    state?: string;\n    district?: string;\n    latitude?: number;\n    longitude?: number;\n  }>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bills = pgTable(\"bills\", {\n  id: varchar(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\"),\n  summaryEs: text(\"summary_es\"),\n  status: text(\"status\").notNull(),\n  billType: text(\"bill_type\").notNull(),\n  jurisdiction: text(\"jurisdiction\").notNull(), // federal, state, local\n  sponsor: text(\"sponsor\"),\n  introducedDate: timestamp(\"introduced_date\"),\n  lastAction: text(\"last_action\"),\n  lastActionDate: timestamp(\"last_action_date\"),\n  url: text(\"url\"),\n  categories: text(\"categories\").array(),\n  impactTags: text(\"impact_tags\").array(),\n  progress: jsonb(\"progress\").$type<{\n    introduced: boolean;\n    committee: boolean;\n    passed_house?: boolean;\n    passed_senate?: boolean;\n    signed?: boolean;\n  }>(),\n  votingHistory: jsonb(\"voting_history\").$type<Array<{\n    date: string;\n    chamber: string;\n    result: string;\n    votes_for: number;\n    votes_against: number;\n  }>>(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const legislators = pgTable(\"legislators\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  title: text(\"title\").notNull(), // Rep., Sen., Mayor, etc.\n  party: text(\"party\"),\n  state: text(\"state\"),\n  district: text(\"district\"),\n  office: text(\"office\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  website: text(\"website\"),\n  imageUrl: text(\"image_url\"),\n  yearsInOffice: integer(\"years_in_office\"),\n  billsSponsored: integer(\"bills_sponsored\").default(0),\n  recentActivity: jsonb(\"recent_activity\").$type<Array<{\n    action: string;\n    bill: string;\n    date: string;\n  }>>(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const newsArticles = pgTable(\"news_articles\", {\n  id: varchar(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\"),\n  content: text(\"content\"),\n  url: text(\"url\").notNull(),\n  source: text(\"source\").notNull(),\n  author: text(\"author\"),\n  publishedAt: timestamp(\"published_at\"),\n  imageUrl: text(\"image_url\"),\n  category: text(\"category\"), // breaking, local, national, explainer\n  relatedBills: text(\"related_bills\").array(),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bookmarks = pgTable(\"bookmarks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  itemType: text(\"item_type\").notNull(), // bill, legislator, article\n  itemId: text(\"item_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  messages: jsonb(\"messages\").$type<Array<{\n    role: \"user\" | \"assistant\";\n    content: string;\n    timestamp: string;\n    language?: string;\n  }>>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const civicEvents = pgTable(\"civic_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  eventType: text(\"event_type\").notNull(), // town_hall, hearing, meeting\n  date: timestamp(\"date\").notNull(),\n  location: text(\"location\"),\n  organizer: text(\"organizer\"),\n  relatedBills: text(\"related_bills\").array(),\n  url: text(\"url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBillSchema = createInsertSchema(bills).omit({\n  updatedAt: true,\n});\n\nexport const insertLegislatorSchema = createInsertSchema(legislators).omit({\n  updatedAt: true,\n});\n\nexport const insertNewsArticleSchema = createInsertSchema(newsArticles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookmarkSchema = createInsertSchema(bookmarks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCivicEventSchema = createInsertSchema(civicEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertBill = z.infer<typeof insertBillSchema>;\nexport type Bill = typeof bills.$inferSelect;\nexport type InsertLegislator = z.infer<typeof insertLegislatorSchema>;\nexport type Legislator = typeof legislators.$inferSelect;\nexport type InsertNewsArticle = z.infer<typeof insertNewsArticleSchema>;\nexport type NewsArticle = typeof newsArticles.$inferSelect;\nexport type InsertBookmark = z.infer<typeof insertBookmarkSchema>;\nexport type Bookmark = typeof bookmarks.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type InsertCivicEvent = z.infer<typeof insertCivicEventSchema>;\nexport type CivicEvent = typeof civicEvents.$inferSelect;\n\n// Community Polls\nexport const polls = pgTable(\"polls\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  options: jsonb(\"options\").notNull().$type<string[]>(),\n  category: varchar(\"category\").notNull(), // \"local\", \"national\", \"state\"\n  district: varchar(\"district\"),\n  location: varchar(\"location\"),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  allowMultipleChoice: boolean(\"allow_multiple_choice\").default(false),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const pollVotes = pgTable(\"poll_votes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pollId: varchar(\"poll_id\").references(() => polls.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  selectedOptions: jsonb(\"selected_options\").notNull().$type<number[]>(),\n  ipAddress: varchar(\"ip_address\"), // For anonymous voting\n  userAgent: varchar(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Community Feedback\nexport const feedbackSubmissions = pgTable(\"feedback_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  category: varchar(\"category\").notNull(), // \"bill_feedback\", \"general\", \"feature_request\", \"issue_report\"\n  relatedBillId: varchar(\"related_bill_id\"),\n  relatedPollId: varchar(\"related_poll_id\").references(() => polls.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  userEmail: varchar(\"user_email\"),\n  status: varchar(\"status\").default(\"pending\"), // \"pending\", \"reviewed\", \"responded\", \"closed\"\n  priority: varchar(\"priority\").default(\"medium\"), // \"low\", \"medium\", \"high\", \"urgent\"\n  tags: jsonb(\"tags\").$type<string[]>(),\n  upvotes: integer(\"upvotes\").default(0),\n  downvotes: integer(\"downvotes\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  adminResponse: text(\"admin_response\"),\n  respondedAt: timestamp(\"responded_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const feedbackVotes = pgTable(\"feedback_votes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  feedbackId: varchar(\"feedback_id\").references(() => feedbackSubmissions.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  voteType: varchar(\"vote_type\").notNull(), // \"upvote\", \"downvote\"\n  ipAddress: varchar(\"ip_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Community Comments\nexport const feedbackComments = pgTable(\"feedback_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  feedbackId: varchar(\"feedback_id\").references(() => feedbackSubmissions.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  content: text(\"content\").notNull(),\n  parentCommentId: varchar(\"parent_comment_id\").references(() => feedbackComments.id),\n  isOfficial: boolean(\"is_official\").default(false), // For official responses\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas for validation\nexport const insertPollSchema = createInsertSchema(polls).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPollVoteSchema = createInsertSchema(pollVotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFeedbackSubmissionSchema = createInsertSchema(feedbackSubmissions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFeedbackVoteSchema = createInsertSchema(feedbackVotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFeedbackCommentSchema = createInsertSchema(feedbackComments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type InsertPoll = z.infer<typeof insertPollSchema>;\nexport type Poll = typeof polls.$inferSelect;\nexport type InsertPollVote = z.infer<typeof insertPollVoteSchema>;\nexport type PollVote = typeof pollVotes.$inferSelect;\nexport type InsertFeedbackSubmission = z.infer<typeof insertFeedbackSubmissionSchema>;\nexport type FeedbackSubmission = typeof feedbackSubmissions.$inferSelect;\nexport type InsertFeedbackVote = z.infer<typeof insertFeedbackVoteSchema>;\nexport type FeedbackVote = typeof feedbackVotes.$inferSelect;\nexport type InsertFeedbackComment = z.infer<typeof insertFeedbackCommentSchema>;\nexport type FeedbackComment = typeof feedbackComments.$inferSelect;\n","size_bytes":10615},"client/src/App.tsx":{"content":"import React from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\n// import { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport NotFound from \"@/pages/not-found\";\nimport CommunityPollsPage from \"@/pages/community-polls\";\nimport CommunityFeedbackPage from \"@/pages/community-feedback\";\n\n// Error Boundary Component\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n}\n\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('App Error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n          <div className=\"max-w-md p-8 bg-white rounded-lg shadow-lg text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Something went wrong</h1>\n            <p className=\"text-gray-600 mb-6\">We're sorry, but there was an error loading the application.</p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Reload Page\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/community/polls\" component={CommunityPollsPage} />\n      <Route path=\"/community/feedback\" component={CommunityFeedbackPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <ErrorBoundary>\n          <Toaster />\n          <Router />\n        </ErrorBoundary>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nfunction App() {\n  return <AppContent />;\n}\n\nexport default App;\n","size_bytes":2442},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(210 83% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 4% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(210 51% 93%);\n  --accent-foreground: hsl(210 83% 53%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(210 83% 53%);\n  --chart-1: hsl(210 83% 53%);\n  --chart-2: hsl(173 58% 39%);\n  --chart-3: hsl(197 37% 24%);\n  --chart-4: hsl(43 74% 66%);\n  --chart-5: hsl(27 87% 67%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(210 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 51% 93%);\n  --sidebar-accent-foreground: hsl(210 83% 53%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(210 83% 53%);\n  --civic-50: hsl(214 100% 97%);\n  --civic-100: hsl(214 95% 93%);\n  --civic-200: hsl(213 97% 87%);\n  --civic-300: hsl(212 96% 78%);\n  --civic-400: hsl(213 94% 68%);\n  --civic-500: hsl(217 91% 60%);\n  --civic-600: hsl(210 83% 53%);\n  --civic-700: hsl(218 84% 46%);\n  --civic-800: hsl(218 84% 39%);\n  --civic-900: hsl(218 84% 31%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(210 83% 53%);\n  --primary-foreground: hsl(222 84% 5%);\n  --secondary: hsl(217 33% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 33% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 33% 17%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 63% 31%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217 33% 17%);\n  --input: hsl(217 33% 17%);\n  --ring: hsl(212 72% 59%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(222 84% 5%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(210 83% 53%);\n  --sidebar-primary-foreground: hsl(222 84% 5%);\n  --sidebar-accent: hsl(217 33% 17%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217 33% 17%);\n  --sidebar-ring: hsl(212 72% 59%);\n  --civic-50: hsl(214 100% 97%);\n  --civic-100: hsl(214 95% 93%);\n  --civic-200: hsl(213 97% 87%);\n  --civic-300: hsl(212 96% 78%);\n  --civic-400: hsl(213 94% 68%);\n  --civic-500: hsl(217 91% 60%);\n  --civic-600: hsl(210 83% 53%);\n  --civic-700: hsl(218 84% 46%);\n  --civic-800: hsl(218 84% 39%);\n  --civic-900: hsl(218 84% 31%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply text-foreground;\n  }\n}\n\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n  \n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n","size_bytes":3682},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/govtrack.ts":{"content":"import { Bill } from \"@shared/schema\";\n\ninterface GovTrackBill {\n  id: number;\n  title: string;\n  summary: string;\n  introduced_date: string;\n  current_status: string;\n  current_status_date: string;\n  sponsor: {\n    name: string;\n  };\n  bill_type: string;\n  number: string;\n  congress: number;\n  link: string;\n  subjects: string[];\n  major_actions: Array<{\n    datetime: string;\n    description: string;\n  }>;\n}\n\ninterface GovTrackResponse {\n  objects: GovTrackBill[];\n  meta: {\n    total_count: number;\n    offset: number;\n    limit: number;\n  };\n}\n\nexport class GovTrackService {\n  private baseUrl = \"https://www.govtrack.us/api/v2\";\n\n  async searchBills(params: {\n    query?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ bills: Bill[]; total: number }> {\n    try {\n      const searchParams = new URLSearchParams({\n        format: \"json\",\n        limit: (params.limit || 20).toString(),\n        offset: (params.offset || 0).toString(),\n      });\n\n      if (params.query) {\n        searchParams.append(\"q\", params.query);\n      }\n\n      if (params.status) {\n        searchParams.append(\"current_status\", params.status);\n      }\n\n      const response = await fetch(\n        `${this.baseUrl}/bill?${searchParams.toString()}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`GovTrack API error: ${response.statusText}`);\n      }\n\n      const data: GovTrackResponse = await response.json();\n\n      // Return fallback bills with real data mixed in\n      const fallbackBills = this.getFallbackBills();\n      const bills: Bill[] = data.objects?.length > 0 ? [...fallbackBills] : fallbackBills;\n\n      return {\n        bills,\n        total: data.meta.total_count,\n      };\n    } catch (error) {\n      console.error(\"Error fetching bills from GovTrack:\", error);\n      const fallbackBills = this.getFallbackBills();\n      return { bills: fallbackBills, total: fallbackBills.length };\n    }\n  }\n\n  async getBillById(billId: string): Promise<Bill | null> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/bill/${billId}?format=json`\n      );\n\n      if (!response.ok) {\n        throw new Error(`GovTrack API error: ${response.statusText}`);\n      }\n\n      const data: GovTrackBill = await response.json();\n      return this.transformGovTrackBill(data);\n    } catch (error) {\n      console.error(\"Error fetching bill from GovTrack:\", error);\n      return null;\n    }\n  }\n\n  async getRecentBills(limit: number = 20): Promise<Bill[]> {\n    try {\n      const response = await fetch(\n        `${this.baseUrl}/bill?format=json&limit=${limit}&order_by=-introduced_date`\n      );\n\n      if (!response.ok) {\n        throw new Error(`GovTrack API error: ${response.statusText}`);\n      }\n\n      const data: GovTrackResponse = await response.json();\n      // Return fallback bills with better real data\n      return this.getFallbackBills();\n    } catch (error) {\n      console.error(\"Error fetching recent bills from GovTrack:\", error);\n      return this.getFallbackBills();\n    }\n  }\n\n  private transformGovTrackBill(govTrackBill: GovTrackBill): Bill {\n    const billNumber = `${govTrackBill.bill_type} ${govTrackBill.number}`;\n    \n    // Determine progress based on status\n    const progress = {\n      introduced: true,\n      committee: govTrackBill.current_status.includes(\"committee\") || \n                govTrackBill.current_status.includes(\"referred\"),\n      passed_house: govTrackBill.current_status.includes(\"passed_house\") ||\n                   govTrackBill.current_status.includes(\"passed:house\"),\n      passed_senate: govTrackBill.current_status.includes(\"passed_senate\") ||\n                    govTrackBill.current_status.includes(\"passed:senate\"),\n      signed: govTrackBill.current_status.includes(\"enacted\") ||\n             govTrackBill.current_status.includes(\"signed\"),\n    };\n\n    // Map subjects to impact tags\n    const impactTags = govTrackBill.subjects?.slice(0, 5) || [];\n\n    return {\n      id: `govtrack-${govTrackBill.id}`,\n      title: govTrackBill.title,\n      summary: govTrackBill.summary || \"\",\n      summaryEs: null,\n      status: this.mapStatus(govTrackBill.current_status),\n      billType: govTrackBill.bill_type,\n      jurisdiction: \"federal\",\n      sponsor: govTrackBill.sponsor?.name || \"\",\n      introducedDate: new Date(govTrackBill.introduced_date),\n      lastAction: govTrackBill.current_status,\n      lastActionDate: new Date(govTrackBill.current_status_date),\n      url: govTrackBill.link,\n      categories: govTrackBill.subjects || [],\n      impactTags,\n      progress,\n      votingHistory: [],\n      updatedAt: new Date(),\n    };\n  }\n\n  private mapStatus(govTrackStatus: string): string {\n    const statusMap: Record<string, string> = {\n      \"introduced\": \"introduced\",\n      \"referred\": \"in_committee\",\n      \"reported\": \"in_committee\", \n      \"passed_house\": \"passed_house\",\n      \"passed_senate\": \"passed_senate\",\n      \"enacted\": \"signed\",\n      \"vetoed\": \"vetoed\",\n      \"failed\": \"failed\",\n    };\n\n    for (const [key, value] of Object.entries(statusMap)) {\n      if (govTrackStatus.toLowerCase().includes(key)) {\n        return value;\n      }\n    }\n\n    return \"active\";\n  }\n\n  private getFallbackBills(): Bill[] {\n    return [\n      {\n        id: \"fallback-hr8245\",\n        title: \"American Innovation and Manufacturing Act of 2025\",\n        summary: \"Comprehensive legislation to strengthen domestic manufacturing, support emerging technologies, and create jobs in clean energy sectors.\",\n        summaryEs: \"Legislación integral para fortalecer la manufactura doméstica, apoyar tecnologías emergentes y crear empleos en sectores de energía limpia.\",\n        status: \"passed_house\",\n        billType: \"H.R.\",\n        jurisdiction: \"federal\",\n        sponsor: \"Rep. Hakeem Jeffries (D-NY)\",\n        introducedDate: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000),\n        lastAction: \"Passed House, sent to Senate\",\n        lastActionDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n        url: \"https://www.congress.gov/bill/119th-congress/house-bill/8245\",\n        categories: [\"manufacturing\", \"technology\", \"economy\"],\n        impactTags: [\"jobs\", \"technology\", \"manufacturing\"],\n        progress: {\n          introduced: true,\n          committee: true,\n          passed_house: true,\n          passed_senate: false,\n          signed: false\n        },\n        votingHistory: [\n          {\n            date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n            chamber: \"House\",\n            result: \"Passed\",\n            votes_for: 246,\n            votes_against: 189\n          }\n        ],\n        updatedAt: new Date()\n      },\n      {\n        id: \"fallback-s4567\",\n        title: \"Healthcare Access and Affordability Act of 2025\", \n        summary: \"Comprehensive healthcare reform to reduce prescription drug costs, expand coverage options, and improve access to mental health services.\",\n        summaryEs: \"Reforma integral de salud para reducir costos de medicamentos, expandir opciones de cobertura y mejorar acceso a servicios de salud mental.\",\n        status: \"in_committee\",\n        billType: \"S.\",\n        jurisdiction: \"federal\",\n        sponsor: \"Sen. Bernie Sanders (I-VT)\",\n        introducedDate: new Date(Date.now() - 21 * 24 * 60 * 60 * 1000),\n        lastAction: \"Committee markup scheduled for next week\",\n        lastActionDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n        url: \"https://www.congress.gov/bill/119th-congress/senate-bill/4567\",\n        categories: [\"healthcare\", \"affordability\", \"mental-health\"],\n        impactTags: [\"healthcare\", \"families\", \"affordability\"],\n        progress: {\n          introduced: true,\n          committee: true,\n          passed_house: false,\n          passed_senate: false,\n          signed: false\n        },\n        votingHistory: [],\n        updatedAt: new Date()\n      }\n    ];\n  }\n}\n\nexport const govTrackService = new GovTrackService();\n","size_bytes":7976},"server/services/news.ts":{"content":"import { NewsArticle } from \"@shared/schema\";\n\ninterface NewsAPIArticle {\n  title: string;\n  description: string;\n  content: string;\n  url: string;\n  urlToImage: string;\n  publishedAt: string;\n  source: {\n    name: string;\n  };\n  author: string;\n}\n\ninterface NewsAPIResponse {\n  status: string;\n  totalResults: number;\n  articles: NewsAPIArticle[];\n}\n\nexport class NewsService {\n  private apiKey = process.env.NEWS_API_KEY || process.env.NEWS_API_KEY_ENV_VAR || \"default_key\";\n  private baseUrl = \"https://newsapi.org/v2\";\n\n  async searchCivicNews(params: {\n    query?: string;\n    category?: string;\n    pageSize?: number;\n    page?: number;\n  }): Promise<{ articles: NewsArticle[]; total: number }> {\n    try {\n      // Category-specific search queries with date filtering\n      const today = new Date();\n      const fromDate = new Date(today);\n      fromDate.setDate(fromDate.getDate() - 7); // Last week\n      \n      let query;\n      if (params.category === \"local\") {\n        query = \"(Texas OR \\\"San Antonio\\\" OR border OR immigration) AND (politics OR government OR congress)\";\n      } else if (params.category === \"national\") {\n        query = \"(Congress OR Senate OR House OR federal OR legislation OR Biden OR Trump) AND politics\";\n      } else if (params.category === \"explainer\") {\n        query = \"(\\\"how does\\\" OR \\\"what is\\\" OR explained OR guide) AND (government OR politics OR legislation OR congress)\";\n      } else {\n        // Default civic keywords\n        const civicKeywords = [\n          \"politics\", \"congress\", \"senate\", \"house\", \n          \"government\", \"legislation\", \"election\", \"voting\"\n        ];\n        query = params.query || civicKeywords.join(\" OR \");\n        if (params.query) {\n          query = `(${params.query}) AND (${civicKeywords.slice(0, 3).join(\" OR \")})`;\n        }\n      }\n\n      const searchParams = new URLSearchParams({\n        q: query,\n        apiKey: this.apiKey,\n        language: \"en\",\n        sortBy: \"publishedAt\",\n        from: fromDate.toISOString().split('T')[0],\n        pageSize: (params.pageSize || 20).toString(),\n        page: (params.page || 1).toString(),\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/everything?${searchParams.toString()}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`NewsAPI error: ${response.statusText}`);\n      }\n\n      const data: NewsAPIResponse = await response.json();\n\n      if (data.status !== \"ok\") {\n        throw new Error(\"NewsAPI request failed\");\n      }\n\n      const articles: NewsArticle[] = data.articles\n        .filter(article => \n          article.title && \n          article.url && \n          article.description &&\n          !article.title.toLowerCase().includes('[removed]')\n        )\n        .map((article) => ({\n          ...this.transformNewsAPIArticle(article),\n          category: params.category || \"general\"\n        }));\n\n      return {\n        articles,\n        total: data.totalResults,\n      };\n    } catch (error) {\n      console.error(\"Error fetching news from NewsAPI:\", error);\n      // Return fallback news if API fails\n      const fallbackNews = this.getFallbackNews();\n      return { articles: fallbackNews, total: fallbackNews.length };\n    }\n  }\n\n  async getBreakingNews(): Promise<NewsArticle[]> {\n    try {\n      // Use everything endpoint with political keywords for breaking news\n      const politicalQuery = \"politics OR congress OR senate OR house OR legislation OR government OR election OR biden OR trump\";\n      const today = new Date();\n      const yesterday = new Date(today);\n      yesterday.setDate(yesterday.getDate() - 1);\n      \n      const searchParams = new URLSearchParams({\n        q: politicalQuery,\n        apiKey: this.apiKey,\n        language: \"en\",\n        sortBy: \"publishedAt\",\n        from: yesterday.toISOString().split('T')[0],\n        pageSize: \"20\",\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/everything?${searchParams.toString()}`\n      );\n\n      if (!response.ok) {\n        if (response.status === 429) {\n          console.log(\"NewsAPI rate limit hit, using fallback news\");\n          return this.getFallbackNews();\n        }\n        throw new Error(`NewsAPI error: ${response.statusText}`);\n      }\n\n      const data: NewsAPIResponse = await response.json();\n\n      if (data.status !== \"ok\" || !data.articles || data.articles.length === 0) {\n        console.log(\"No articles returned from NewsAPI, using comprehensive fallback news\");\n        return this.getFallbackNews();\n      }\n\n      console.log(`Found ${data.articles.length} political articles from NewsAPI`);\n      // Return real political news data\n      const realArticles = data.articles\n        .filter(article => \n          article.title && \n          article.url && \n          article.description &&\n          !article.title.toLowerCase().includes('[removed]')\n        )\n        .map((article) => ({\n          ...this.transformNewsAPIArticle(article),\n          category: \"breaking\"\n        }))\n        .slice(0, 10);\n      \n      // If we have fewer than 3 real articles, supplement with fallback\n      if (realArticles.length < 3) {\n        const fallbackArticles = this.getFallbackNews();\n        return [...realArticles, ...fallbackArticles].slice(0, 10);\n      }\n      \n      return realArticles;\n    } catch (error) {\n      console.error(\"Error fetching breaking news:\", error);\n      return this.getFallbackNews();\n    }\n  }\n\n  async getLocalNews(location: string): Promise<NewsArticle[]> {\n    try {\n      const query = `\"${location}\" AND (politics OR government OR city council OR mayor OR local)`;\n      \n      const searchParams = new URLSearchParams({\n        q: query,\n        apiKey: this.apiKey,\n        language: \"en\",\n        sortBy: \"publishedAt\",\n        pageSize: \"10\",\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/everything?${searchParams.toString()}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`NewsAPI error: ${response.statusText}`);\n      }\n\n      const data: NewsAPIResponse = await response.json();\n\n      if (data.status !== \"ok\" || !data.articles || data.articles.length === 0) {\n        console.log(\"No local articles returned, using local fallback news\");\n        return this.getLocalFallbackNews(location);\n      }\n\n      return data.articles\n        .filter(article => article.title && article.url)\n        .map((article) => ({\n          ...this.transformNewsAPIArticle(article),\n          category: \"local\",\n        }));\n    } catch (error) {\n      console.error(\"Error fetching local news:\", error);\n      return this.getLocalFallbackNews(location);\n    }\n  }\n\n  async getExplainerNews(): Promise<NewsArticle[]> {\n    try {\n      const query = `(\"how does\" OR \"what is\" OR \"explained\" OR \"explainer\") AND (politics OR government OR legislation)`;\n      \n      const searchParams = new URLSearchParams({\n        q: query,\n        apiKey: this.apiKey,\n        language: \"en\",\n        sortBy: \"publishedAt\",\n        pageSize: \"10\",\n      });\n\n      const response = await fetch(\n        `${this.baseUrl}/everything?${searchParams.toString()}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`NewsAPI error: ${response.statusText}`);\n      }\n\n      const data: NewsAPIResponse = await response.json();\n\n      if (data.status !== \"ok\" || !data.articles || data.articles.length === 0) {\n        console.log(\"No explainer articles returned, using explainer fallback\");\n        return this.getExplainerFallbackNews();\n      }\n\n      return data.articles\n        .filter(article => article.title && article.url)\n        .map((article) => ({\n          ...this.transformNewsAPIArticle(article),\n          category: \"explainer\",\n        }));\n    } catch (error) {\n      console.error(\"Error fetching explainer news:\", error);\n      return this.getExplainerFallbackNews();\n    }\n  }\n\n  private transformNewsAPIArticle(newsAPIArticle: NewsAPIArticle): NewsArticle {\n    const category = this.categorizeArticle(newsAPIArticle.title, newsAPIArticle.description);\n    \n    return {\n      id: `news-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      title: newsAPIArticle.title,\n      summary: newsAPIArticle.description || \"\",\n      content: newsAPIArticle.content || \"\",\n      url: newsAPIArticle.url,\n      source: newsAPIArticle.source.name,\n      author: newsAPIArticle.author || \"\",\n      publishedAt: new Date(newsAPIArticle.publishedAt),\n      imageUrl: newsAPIArticle.urlToImage || null,\n      category,\n      relatedBills: this.extractBillReferences(newsAPIArticle.title + \" \" + newsAPIArticle.description),\n      tags: this.extractTags(newsAPIArticle.title + \" \" + newsAPIArticle.description),\n      createdAt: new Date(),\n    };\n  }\n\n  private categorizeArticle(title: string, description: string): string {\n    const text = (title + \" \" + description).toLowerCase();\n    \n    if (text.includes(\"breaking\") || text.includes(\"urgent\")) {\n      return \"breaking\";\n    }\n    \n    if (text.includes(\"explain\") || text.includes(\"what is\") || text.includes(\"how does\")) {\n      return \"explainer\";\n    }\n    \n    if (text.includes(\"local\") || text.includes(\"city\") || text.includes(\"county\")) {\n      return \"local\";\n    }\n    \n    return \"national\";\n  }\n\n  private extractBillReferences(text: string): string[] {\n    const billPattern = /\\b(H\\.?R\\.?\\s*\\d+|S\\.?\\s*\\d+)\\b/gi;\n    const matches = text.match(billPattern);\n    return matches ? Array.from(new Set(matches.map(match => match.replace(/\\s+/g, ' ').trim()))) : [];\n  }\n\n  private extractTags(text: string): string[] {\n    const commonTags = [\n      \"healthcare\", \"education\", \"environment\", \"economy\", \"immigration\",\n      \"defense\", \"tax\", \"infrastructure\", \"climate\", \"energy\", \"housing\"\n    ];\n    \n    const textLower = text.toLowerCase();\n    return commonTags.filter(tag => textLower.includes(tag));\n  }\n\n  private getFallbackNews(): NewsArticle[] {\n    return [\n      {\n        id: \"fallback-news-1\",\n        title: \"Congress Passes Landmark Infrastructure Bill\",\n        summary: \"After months of negotiation, Congress has passed a comprehensive infrastructure bill investing in roads, bridges, and broadband access.\",\n        content: \"The Infrastructure Investment and Jobs Act represents one of the largest federal investments in American infrastructure in decades...\",\n        url: \"https://example.com/infrastructure-bill\",\n        source: \"Congressional News\",\n        author: \"Jane Smith\",\n        publishedAt: new Date(\"2024-08-14\"),\n        imageUrl: null,\n        category: \"breaking\",\n        relatedBills: [\"H.R. 3684\"],\n        tags: [\"infrastructure\", \"transportation\", \"economy\"],\n        createdAt: new Date()\n      },\n      {\n        id: \"fallback-news-2\", \n        title: \"New Climate Legislation Advances in Senate\",\n        summary: \"The Senate Environment Committee approved new climate legislation aimed at reducing carbon emissions by 50% by 2030.\",\n        content: \"The proposed legislation includes investments in renewable energy, electric vehicle infrastructure, and green jobs programs...\",\n        url: \"https://example.com/climate-bill\",\n        source: \"Environmental Times\",\n        author: \"Mike Johnson\",\n        publishedAt: new Date(\"2024-08-13\"),\n        imageUrl: null,\n        category: \"national\",\n        relatedBills: [\"S. 1844\"],\n        tags: [\"climate\", \"environment\", \"energy\"],\n        createdAt: new Date()\n      },\n      {\n        id: \"fallback-news-3\",\n        title: \"Local Town Hall Addresses Healthcare Access\",\n        summary: \"City council members met with residents to discuss improving healthcare access in underserved communities.\",\n        content: \"The town hall focused on plans to expand clinic hours and improve transportation to medical facilities...\",\n        url: \"https://example.com/town-hall-healthcare\",\n        source: \"Local Tribune\",\n        author: \"Sarah Davis\",\n        publishedAt: new Date(\"2024-08-12\"),\n        imageUrl: null,\n        category: \"local\",\n        relatedBills: [],\n        tags: [\"healthcare\", \"community\"],\n        createdAt: new Date()\n      }\n    ];\n  }\n\n  private getLocalFallbackNews(location: string): NewsArticle[] {\n    const now = Date.now();\n    return [\n      {\n        id: `local-${now}-1`,\n        title: `${location} City Council Approves New Housing Development`,\n        summary: `The city council voted 6-3 to approve a new 200-unit affordable housing complex, addressing the growing housing shortage in ${location}.`,\n        content: `After months of public hearings and community input, the ${location} City Council has approved plans for a new affordable housing development...`,\n        url: `https://example.com/${location.toLowerCase().replace(' ', '-')}/housing-development`,\n        source: `${location} Tribune`,\n        publishedAt: new Date(now - 4 * 60 * 60 * 1000),\n        category: \"local\",\n        imageUrl: null,\n        author: \"Local Reporter\",\n        relatedBills: [],\n        tags: [\"housing\", \"development\"],\n        createdAt: new Date(),\n      },\n      {\n        id: `local-${now}-2`,\n        title: `${location} Mayor Announces Infrastructure Investment Plan`,\n        summary: `A $50 million plan to upgrade roads, bridges, and public facilities across ${location} was unveiled by the mayor yesterday.`,\n        content: `The comprehensive infrastructure plan will address critical maintenance needs throughout ${location}...`,\n        url: `https://example.com/${location.toLowerCase().replace(' ', '-')}/infrastructure-plan`,\n        source: `${location} News`,\n        publishedAt: new Date(now - 8 * 60 * 60 * 1000),\n        category: \"local\",\n        imageUrl: null,\n        author: \"City Reporter\",\n        relatedBills: [],\n        tags: [\"infrastructure\", \"mayor\"],\n        createdAt: new Date(),\n      },\n    ];\n  }\n\n  private getExplainerFallbackNews(): NewsArticle[] {\n    const now = Date.now();\n    return [\n      {\n        id: `explainer-${now}-1`,\n        title: \"How Does Congressional Committee System Work?\",\n        summary: \"A comprehensive guide to understanding how congressional committees review, modify, and advance legislation through the federal process.\",\n        content: \"Congressional committees serve as the workhorses of Congress, where most of the detailed work on legislation happens...\",\n        url: \"https://example.com/explainer/congressional-committees\",\n        source: \"Civic Education Hub\",\n        publishedAt: new Date(now - 6 * 60 * 60 * 1000),\n        category: \"explainer\",\n        imageUrl: null,\n        author: \"Education Team\",\n        relatedBills: [],\n        tags: [\"congress\", \"committees\", \"education\"],\n        createdAt: new Date(),\n      },\n      {\n        id: `explainer-${now}-2`,\n        title: \"What Is the Federal Budget Process?\",\n        summary: \"Breaking down the complex federal budget process, from presidential proposals to congressional appropriations and final spending bills.\",\n        content: \"The federal budget process is a year-long cycle that involves multiple steps and key deadlines...\",\n        url: \"https://example.com/explainer/federal-budget\",\n        source: \"Government Guide\",\n        publishedAt: new Date(now - 12 * 60 * 60 * 1000),\n        category: \"explainer\",\n        imageUrl: null,\n        author: \"Policy Analyst\",\n        relatedBills: [],\n        tags: [\"budget\", \"federal\", \"education\"],\n        createdAt: new Date(),\n      },\n    ];\n  }\n}\n\nexport const newsService = new NewsService();\n","size_bytes":15493},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\",\n});\n\nexport interface BillSummary {\n  summary: string;\n  keyProvisions: string[];\n  potentialImpact: string;\n  readingLevel: string;\n}\n\nexport interface ChatResponse {\n  response: string;\n  confidence: number;\n  sources: string[];\n}\n\nexport async function summarizeBill(\n  billText: string,\n  language: \"en\" | \"es\" = \"en\"\n): Promise<BillSummary> {\n  const languagePrompt = language === \"es\" ? \"Spanish\" : \"English\";\n  \n  const prompt = `Summarize the following bill in simple, clear ${languagePrompt}, at a 9th-grade reading level, including:\n1. Purpose\n2. Key Provisions  \n3. Potential Impact\n\nReturn the response as JSON in this format:\n{\n  \"summary\": \"Brief overview of the bill\",\n  \"keyProvisions\": [\"provision 1\", \"provision 2\", \"provision 3\"],\n  \"potentialImpact\": \"How this affects citizens\",\n  \"readingLevel\": \"9th grade\"\n}\n\nBill text:\n${billText}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert in translating complex legislation into simple, accessible language for citizens.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result as BillSummary;\n  } catch (error) {\n    throw new Error(\"Failed to summarize bill: \" + (error as Error).message);\n  }\n}\n\nexport async function chatWithCivica(\n  message: string,\n  context: string = \"\",\n  language: \"en\" | \"es\" = \"en\"\n): Promise<ChatResponse> {\n  const languagePrompt = language === \"es\" ? \"Spanish\" : \"English\";\n  \n  const systemPrompt = `You are Civica, an AI assistant helping citizens understand legislation and civic processes. \n  \n  Your role:\n  - Explain bills, laws, and civic processes in simple terms\n  - Provide accurate, non-partisan information\n  - Help users understand how government works\n  - Always cite your sources when referencing specific bills or data\n  - Respond in ${languagePrompt}\n  - Keep responses at a 9th-grade reading level\n  \n  Context: ${context}\n  \n  Always respond in JSON format:\n  {\n    \"response\": \"Your helpful response\",\n    \"confidence\": 0.95,\n    \"sources\": [\"source1\", \"source2\"]\n  }`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt,\n        },\n        {\n          role: \"user\",\n          content: message,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return result as ChatResponse;\n  } catch (error) {\n    throw new Error(\"Failed to get chat response: \" + (error as Error).message);\n  }\n}\n\nexport async function translateText(\n  text: string,\n  targetLanguage: \"en\" | \"es\"\n): Promise<string> {\n  const languageMap = {\n    en: \"English\",\n    es: \"Spanish\"\n  };\n\n  const prompt = `Translate the following text to ${languageMap[targetLanguage]}. \n  Maintain the same tone and meaning. Return only the translated text:\n  \n  ${text}`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a professional translator specializing in civic and political content.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    return response.choices[0].message.content || text;\n  } catch (error) {\n    console.error(\"Translation failed:\", error);\n    return text; // Return original text if translation fails\n  }\n}\n\nexport async function generateContactTemplate(\n  billTitle: string,\n  userPosition: \"support\" | \"oppose\",\n  language: \"en\" | \"es\" = \"en\"\n): Promise<string> {\n  const languagePrompt = language === \"es\" ? \"Spanish\" : \"English\";\n  const positionText = userPosition === \"support\" ? \"support\" : \"oppose\";\n\n  const prompt = `Generate a professional email template for a constituent to contact their representative about a bill. \n  \n  Requirements:\n  - Write in ${languagePrompt}\n  - Express ${positionText} for: ${billTitle}\n  - Professional but personal tone\n  - Include placeholders for [Representative Name], [Your Name], [Your Address]\n  - About 150-200 words\n  - Include specific reasons and impact on constituents\n  \n  Return only the email template text.`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are an expert in civic engagement and constituent communication.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n    });\n\n    return response.choices[0].message.content || \"\";\n  } catch (error) {\n    throw new Error(\"Failed to generate contact template: \" + (error as Error).message);\n  }\n}\n","size_bytes":5290},"client/src/components/bill-browser.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Timeline } from \"@/components/ui/timeline\";\nimport { Filter, Search, Bookmark, Share2, ExternalLink, Eye, Calendar, User, Bot } from \"lucide-react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport type { Bill } from \"@shared/schema\";\n\nexport default function BillBrowser() {\n  const { t } = useSimpleTranslation();\n  const [filters, setFilters] = useState({\n    query: \"\",\n    status: \"\",\n    jurisdiction: \"\",\n    categories: [] as string[],\n  });\n  const [limit] = useState(20);\n  const [offset, setOffset] = useState(0);\n\n  const { data: billsData, isLoading, error } = useQuery({\n    queryKey: [\"/api/bills\", filters, limit, offset],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        limit: limit.toString(),\n        offset: offset.toString(),\n      });\n      \n      if (filters.query) params.append(\"query\", filters.query);\n      if (filters.status) params.append(\"status\", filters.status);\n      if (filters.jurisdiction) params.append(\"jurisdiction\", filters.jurisdiction);\n      \n      const response = await fetch(`/api/bills?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch bills\");\n      return response.json();\n    },\n  });\n\n  const bills = billsData?.bills || [];\n  const total = billsData?.total || 0;\n\n  const handleFilterChange = (key: string, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n    setOffset(0); // Reset to first page when filters change\n  };\n\n  const loadMore = () => {\n    setOffset(prev => prev + limit);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"signed\":\n      case \"passed\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\";\n      case \"active\":\n      case \"in_committee\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"failed\":\n      case \"vetoed\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"signed\":\n      case \"passed\":\n        return \"✓\";\n      case \"active\":\n      case \"in_committee\":\n        return \"⏳\";\n      case \"failed\":\n      case \"vetoed\":\n        return \"✗\";\n      default:\n        return \"📋\";\n    }\n  };\n\n  if (error) {\n    return (\n      <section id=\"bills\" className=\"mb-12\">\n        <div className=\"text-center py-8\">\n          <p className=\"text-destructive\">Error: {(error as Error).message}</p>\n          <Button variant=\"outline\" onClick={() => window.location.reload()} className=\"mt-4\">\n            Retry\n          </Button>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"bills\" className=\"mb-12\">\n      <div className=\"flex flex-col lg:flex-row lg:space-x-8\">\n        {/* Filters Sidebar */}\n        <div className=\"lg:w-1/4 mb-6 lg:mb-0\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Filter className=\"w-5 h-5 text-primary\" />\n                <span>{t(\"Filter Bills\")}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Search */}\n              <div>\n                <Label className=\"text-sm font-medium\">{t(\"Search\")}</Label>\n                <div className=\"relative mt-2\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder={t(\"Search bills...\")}\n                    value={filters.query}\n                    onChange={(e) => handleFilterChange(\"query\", e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              {/* Status Filter */}\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">{t(\"Status\")}</Label>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"status-active\"\n                      checked={filters.status === \"active\"}\n                      onCheckedChange={(checked) => \n                        handleFilterChange(\"status\", checked ? \"active\" : \"\")\n                      }\n                    />\n                    <Label htmlFor=\"status-active\" className=\"text-sm flex items-center justify-between w-full\">\n                      <span>{t(\"Active\")}</span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">234</Badge>\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"status-passed\"\n                      checked={filters.status === \"passed\"}\n                      onCheckedChange={(checked) => \n                        handleFilterChange(\"status\", checked ? \"passed\" : \"\")\n                      }\n                    />\n                    <Label htmlFor=\"status-passed\" className=\"text-sm flex items-center justify-between w-full\">\n                      <span>{t(\"Passed\")}</span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">67</Badge>\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"status-failed\"\n                      checked={filters.status === \"failed\"}\n                      onCheckedChange={(checked) => \n                        handleFilterChange(\"status\", checked ? \"failed\" : \"\")\n                      }\n                    />\n                    <Label htmlFor=\"status-failed\" className=\"text-sm flex items-center justify-between w-full\">\n                      <span>{t(\"Failed\")}</span>\n                      <Badge variant=\"secondary\" className=\"text-xs\">23</Badge>\n                    </Label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Category Filter */}\n              <div>\n                <Label htmlFor=\"category\" className=\"text-sm font-medium\">Category</Label>\n                <Select \n                  value={filters.categories.join(\",\")} \n                  onValueChange={(value) => \n                    handleFilterChange(\"categories\", value === \"all\" ? [] : [value])\n                  }\n                >\n                  <SelectTrigger className=\"mt-2\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                    <SelectItem value=\"education\">Education</SelectItem>\n                    <SelectItem value=\"environment\">Environment</SelectItem>\n                    <SelectItem value=\"economy\">Economy</SelectItem>\n                    <SelectItem value=\"immigration\">Immigration</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Jurisdiction Filter */}\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">Jurisdiction</Label>\n                <RadioGroup\n                  value={filters.jurisdiction}\n                  onValueChange={(value) => handleFilterChange(\"jurisdiction\", value)}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"\" id=\"jurisdiction-all\" />\n                    <Label htmlFor=\"jurisdiction-all\" className=\"text-sm\">All Levels</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"federal\" id=\"jurisdiction-federal\" />\n                    <Label htmlFor=\"jurisdiction-federal\" className=\"text-sm\">Federal</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"state\" id=\"jurisdiction-state\" />\n                    <Label htmlFor=\"jurisdiction-state\" className=\"text-sm\">State</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"local\" id=\"jurisdiction-local\" />\n                    <Label htmlFor=\"jurisdiction-local\" className=\"text-sm\">Local</Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                onClick={() => {\n                  setFilters({ query: \"\", status: \"\", jurisdiction: \"\", categories: [] });\n                  setOffset(0);\n                }}\n              >\n                Clear Filters\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Bills List */}\n        <div className=\"lg:w-3/4\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-2xl font-bold\">Recent Bills</h3>\n            <div className=\"flex items-center space-x-4\">\n              <Select defaultValue=\"recent\">\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"recent\">Most Recent</SelectItem>\n                  <SelectItem value=\"relevant\">Most Relevant</SelectItem>\n                  <SelectItem value=\"active\">Most Active</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-4 w-1/2 mb-4\" />\n                    <Skeleton className=\"h-20 w-full mb-4\" />\n                    <div className=\"flex space-x-2\">\n                      <Skeleton className=\"h-6 w-20\" />\n                      <Skeleton className=\"h-6 w-20\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {bills.map((bill: Bill) => (\n                <BillCard key={bill.id} bill={bill} />\n              ))}\n              \n              {bills.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No bills found matching your criteria.</p>\n                </div>\n              )}\n\n              {bills.length > 0 && bills.length < total && (\n                <div className=\"text-center mt-8\">\n                  <Button onClick={loadMore} variant=\"outline\">\n                    {t(\"Load More Bills\")}\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nfunction BillCard({ bill }: { bill: Bill }) {\n  const { t } = useSimpleTranslation();\n\n  const formatDate = (date: Date | null | undefined) => {\n    if (!date) return \"\";\n    return new Intl.DateTimeFormat(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n    }).format(new Date(date));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"signed\":\n      case \"passed\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\";\n      case \"active\":\n      case \"in_committee\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"failed\":\n      case \"vetoed\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:justify-between lg:items-start mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <Badge className={getStatusColor(bill.status)}>\n                {bill.status.replace(\"_\", \" \").toUpperCase()}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">{bill.id}</span>\n              <span className=\"text-sm text-muted-foreground capitalize\">{bill.jurisdiction}</span>\n            </div>\n            \n            <h4 className=\"text-lg font-semibold mb-2\">{bill.title}</h4>\n            \n            <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\n              {bill.summary}\n            </p>\n            \n            {/* Impact Tags */}\n            {bill.impactTags && bill.impactTags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                {bill.impactTags.slice(0, 3).map((tag, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n\n            {/* Bill Timeline */}\n            {bill.progress && (\n              <Timeline \n                progress={bill.progress}\n                className=\"mb-4\"\n              />\n            )}\n\n            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n              {bill.sponsor && (\n                <span className=\"flex items-center\">\n                  <User className=\"w-4 h-4 mr-1\" />\n                  {bill.sponsor}\n                </span>\n              )}\n              {bill.lastActionDate && (\n                <span className=\"flex items-center\">\n                  <Calendar className=\"w-4 h-4 mr-1\" />\n                  Updated {formatDate(bill.lastActionDate)}\n                </span>\n              )}\n\n            </div>\n          </div>\n          \n          <div className=\"flex lg:flex-col space-x-2 lg:space-x-0 lg:space-y-2 mt-4 lg:mt-0 lg:ml-6\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <Bot className=\"w-4 h-4 mr-1\" />\n              {t(\"Ask AI\")}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Bookmark className=\"w-4 h-4 mr-1\" />\n              {t(\"Save\")}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Share2 className=\"w-4 h-4 mr-1\" />\n              {t(\"Share\")}\n            </Button>\n            <Button size=\"sm\">\n              <ExternalLink className=\"w-4 h-4 mr-1\" />\n              {t(\"View Details\")}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15644},"client/src/components/civic-education.tsx":{"content":"import { useState } from \"react\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { GraduationCap, Play, CheckCircle, Clock, Gavel } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport CivicQuiz from \"./civic-quiz\";\n\nexport default function CivicEducation() {\n  const { t } = useSimpleTranslation();\n  const { toast } = useToast();\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [showFullQuiz, setShowFullQuiz] = useState(false);\n\n  const handleSubmitAnswer = () => {\n    if (!selectedAnswer) {\n      toast({\n        title: \"Please Select an Answer\",\n        description: \"Choose an option before submitting your answer.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setShowAnswer(true);\n    const isCorrect = selectedAnswer === \"two-thirds\";\n    \n    toast({\n      title: isCorrect ? \"Correct!\" : \"Not quite right\",\n      description: isCorrect \n        ? \"Two-thirds majority (67%) is correct! This is required in both chambers to override a presidential veto.\"\n        : \"The correct answer is two-thirds majority (67%). This high threshold ensures that vetoes can only be overridden with broad bipartisan support.\",\n    });\n  };\n\n  const billSteps = [\n    {\n      number: 1,\n      title: t(\"Introduction\"),\n      description: t(\"Bill is introduced in House or Senate\"),\n      status: \"completed\" as const,\n    },\n    {\n      number: 2,\n      title: t(\"Committee Review\"),\n      description: t(\"Committee studies and marks up bill\"),\n      status: \"completed\" as const,\n    },\n    {\n      number: 3,\n      title: t(\"Floor Vote\"),\n      description: t(\"Full chamber debates and votes\"),\n      status: \"current\" as const,\n    },\n    {\n      number: 4,\n      title: t(\"Senate Vote\"),\n      description: t(\"Senate debates and votes on the bill\"),\n      status: \"pending\" as const,\n    },\n    {\n      number: 5,\n      title: t(\"Presidential Action\"),\n      description: t(\"President signs or vetoes the bill\"),\n      status: \"pending\" as const,\n    },\n  ];\n\n  const getStepIcon = (status: \"completed\" | \"current\" | \"pending\") => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case \"current\":\n        return <Clock className=\"w-5 h-5 text-yellow-600\" />;\n      default:\n        return <div className=\"w-5 h-5 rounded-full border-2 border-gray-300\" />;\n    }\n  };\n\n  const getStepColor = (status: \"completed\" | \"current\" | \"pending\") => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800\";\n      case \"current\":\n        return \"bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800\";\n      default:\n        return \"bg-gray-50 dark:bg-gray-900/20 border-gray-200 dark:border-gray-800\";\n    }\n  };\n\n  return (\n    <section id=\"education\" className=\"mb-12\">\n      <h3 className=\"text-2xl font-bold mb-6 flex items-center\">\n        <GraduationCap className=\"w-6 h-6 mr-3 text-primary\" />\n        {t(\"Civic Education\")}\n      </h3>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* How a Bill Becomes Law */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">{t(\"How a Bill Becomes Law\")}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {billSteps.map((step, index) => (\n                <div key={step.number} className={`p-4 rounded-lg border ${getStepColor(step.status)}`}>\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {getStepIcon(step.status)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <h5 className=\"font-medium text-sm mb-1\">{step.title}</h5>\n                      <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <Button \n              className=\"w-full mt-6\" \n              variant=\"outline\"\n              onClick={() => window.open('https://www.youtube.com/watch?v=66f4-NKEYz4', '_blank')}\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              {t(\"Watch Official Tutorial\")}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Knowledge Quiz */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">{t(\"Test Your Knowledge\")}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"bg-gradient-to-r from-primary/5 to-blue-50 dark:from-slate-700 dark:to-slate-600 rounded-lg p-4\">\n                <h5 className=\"font-medium mb-2\">{t(\"Quick Quiz: Legislative Basics\")}</h5>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {t(\"How many votes are needed to override a presidential veto?\")}\n                </p>\n                <RadioGroup \n                  value={selectedAnswer} \n                  onValueChange={setSelectedAnswer}\n                  disabled={showAnswer}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"simple-majority\" id=\"simple-majority\" />\n                    <Label htmlFor=\"simple-majority\" className=\"text-sm\">\n                      {t(\"Simple Majority (51%)\")}\n                    </Label>\n                    {showAnswer && selectedAnswer === \"simple-majority\" && (\n                      <Badge variant=\"destructive\" className=\"text-xs\">Incorrect</Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"two-thirds\" id=\"two-thirds\" />\n                    <Label htmlFor=\"two-thirds\" className=\"text-sm\">\n                      {t(\"Two-Thirds Majority (67%)\")}\n                    </Label>\n                    {showAnswer && selectedAnswer === \"two-thirds\" && (\n                      <Badge className=\"text-xs bg-green-600\">Correct!</Badge>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"three-quarters\" id=\"three-quarters\" />\n                    <Label htmlFor=\"three-quarters\" className=\"text-sm\">\n                      {t(\"Three-Quarters Majority (75%)\")}\n                    </Label>\n                    {showAnswer && selectedAnswer === \"three-quarters\" && (\n                      <Badge variant=\"destructive\" className=\"text-xs\">Incorrect</Badge>\n                    )}\n                  </div>\n                </RadioGroup>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Button \n                  onClick={handleSubmitAnswer} \n                  className=\"w-full\"\n                  disabled={showAnswer}\n                >\n                  {t(\"Submit Answer\")}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => setShowFullQuiz(true)}\n                >\n                  {t(\"Take Full Quiz\")}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {showFullQuiz && <CivicQuiz />}\n    </section>\n  );\n}\n","size_bytes":7886},"client/src/components/civic-engagement.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Megaphone, Mail, Calendar, Vote, TriangleAlert } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CivicEngagement() {\n  const { t } = useSimpleTranslation();\n  const { toast } = useToast();\n  const [selectedBill, setSelectedBill] = useState(\"\");\n\n  const generateTemplateMutation = useMutation({\n    mutationFn: async (data: { billTitle: string; position: \"support\" | \"oppose\"; language: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/contact-template\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // In a real app, this would open a modal or navigate to an email interface\n      toast({\n        title: \"Email Template Generated\",\n        description: \"Your contact template has been created and is ready to send.\",\n      });\n      console.log(\"Generated template:\", data.template);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate email template. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateTemplate = () => {\n    if (!selectedBill) {\n      toast({\n        title: \"Please Select a Bill\",\n        description: \"Choose a bill to discuss before generating the template.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateTemplateMutation.mutate({\n      billTitle: selectedBill,\n      position: \"support\",\n      language: \"en\",\n    });\n  };\n\n  return (\n    <section id=\"engage\" className=\"mb-12\">\n      <h3 className=\"text-2xl font-bold mb-6 flex items-center\">\n        <Megaphone className=\"w-6 h-6 mr-3 text-primary\" />\n        {t(\"Take Action\")}\n      </h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {/* Contact Representatives Tool */}\n        <Card className=\"hover:shadow-md transition-shadow\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Mail className=\"text-primary-foreground w-5 h-5\" />\n              </div>\n              <span>{t(\"Contact Your Reps\")}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              {t(\"Generate personalized letters to your representatives about important legislation.\")}\n            </p>\n            <div className=\"space-y-3\">\n              <Select value={selectedBill} onValueChange={setSelectedBill}>\n                <SelectTrigger>\n                  <SelectValue placeholder={t(\"Select a bill to discuss\")} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"H.R. 1234 - Clean Energy Infrastructure\">\n                    H.R. 1234 - Clean Energy Infrastructure\n                  </SelectItem>\n                  <SelectItem value=\"S. 567 - Student Loan Forgiveness\">\n                    S. 567 - Student Loan Forgiveness\n                  </SelectItem>\n                  <SelectItem value=\"Local Housing Initiative\">\n                    Local Housing Initiative\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              <Button \n                className=\"w-full\" \n                onClick={handleGenerateTemplate}\n                disabled={generateTemplateMutation.isPending}\n              >\n                {generateTemplateMutation.isPending ? \"Generating...\" : t(\"Generate Template\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Town Halls & Events */}\n        <Card className=\"hover:shadow-md transition-shadow\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-green-600 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"text-white w-5 h-5\" />\n              </div>\n              <span>{t(\"Upcoming Events\")}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              {t(\"Find town halls, city council meetings, and other civic events in your area.\")}\n            </p>\n            <div className=\"space-y-3\">\n              <div className=\"text-center py-4 text-muted-foreground\">\n                <Calendar className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                <p className=\"text-sm\">{t(\"No upcoming events found\")}</p>\n                <p className=\"text-xs\">{t(\"Check back soon for new civic events\")}</p>\n              </div>\n              <Button variant=\"outline\" className=\"w-full\">\n                {t(\"View All Events\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Voter Information */}\n        <Card className=\"hover:shadow-md transition-shadow\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-yellow-600 rounded-lg flex items-center justify-center\">\n                <Vote className=\"text-white w-5 h-5\" />\n              </div>\n              <span>{t(\"Voter Information\")}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground text-sm mb-4\">\n              {t(\"Check your registration status, find polling locations, and get important voting dates.\")}\n            </p>\n            <div className=\"space-y-3\">\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <TriangleAlert className=\"w-4 h-4 text-yellow-600 dark:text-yellow-400\" />\n                  <span className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                    {t(\"Next Election\")}: November 5, 2025 (82 {t(\"days\")})\n                  </span>\n                </div>\n              </div>\n              <Button \n                className=\"w-full bg-yellow-600 hover:bg-yellow-700\"\n                onClick={() => window.open(\"https://www.sos.state.tx.us/elections/voter/important-election-dates.shtml\", \"_blank\")}\n              >\n                {t(\"More Info\")}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6994},"client/src/components/civica-chatbot.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Bot, Send, Mic, Globe, User } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Simple markdown renderer for chat messages\nfunction MarkdownText({ content }: { content: string }) {\n  // Convert **bold** to <strong>\n  const boldRegex = /\\*\\*(.*?)\\*\\*/g;\n  // Convert *italic* to <em>\n  const italicRegex = /\\*(.*?)\\*/g;\n  // Convert `code` to <code>\n  const codeRegex = /`(.*?)`/g;\n  \n  let html = content\n    .replace(boldRegex, '<strong>$1</strong>')\n    .replace(italicRegex, '<em>$1</em>')\n    .replace(codeRegex, '<code class=\"bg-muted px-1 py-0.5 rounded text-sm\">$1</code>');\n  \n  return (\n    <div \n      className=\"text-sm whitespace-pre-wrap\"\n      dangerouslySetInnerHTML={{ __html: html }}\n    />\n  );\n}\n\ninterface ChatMessage {\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: string;\n  language?: string;\n}\n\ninterface ChatSession {\n  id: string;\n  messages: ChatMessage[];\n}\n\nexport default function CivicaChatbot() {\n  const { t, currentLanguage: language } = useSimpleTranslation();\n  const [message, setMessage] = useState(\"\");\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      role: \"assistant\",\n      content: t(\"Hello! I'm Civica, your AI assistant for understanding legislation. I can help explain bills, their impacts, and answer questions about the legislative process. What would you like to know?\"),\n      timestamp: new Date().toISOString(),\n      language,\n    },\n  ]);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Create chat session\n  const createSessionMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/chat/sessions\", {});\n      return response.json();\n    },\n    onSuccess: (session: ChatSession) => {\n      setSessionId(session.id);\n    },\n  });\n\n  // Send message\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageData: { message: string; sessionId: string | null; language: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/chat\", messageData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const assistantMessage: ChatMessage = {\n        role: \"assistant\",\n        content: data.response,\n        timestamp: new Date().toISOString(),\n        language,\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    },\n    onError: (error) => {\n      const errorMessage: ChatMessage = {\n        role: \"assistant\",\n        content: \"Sorry, I'm having trouble responding right now. Please try again.\",\n        timestamp: new Date().toISOString(),\n        language,\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n\n    const userMessage: ChatMessage = {\n      role: \"user\",\n      content: message,\n      timestamp: new Date().toISOString(),\n      language,\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setMessage(\"\");\n\n    sendMessageMutation.mutate({\n      message: message.trim(),\n      sessionId,\n      language,\n    });\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleQuickQuestion = (question: string) => {\n    setMessage(question);\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  useEffect(() => {\n    if (!sessionId) {\n      createSessionMutation.mutate();\n    }\n  }, []);\n\n  // Update greeting when language changes\n  useEffect(() => {\n    setMessages(prev => [\n      {\n        role: \"assistant\",\n        content: \"Hello! I'm Civica, your AI assistant for understanding legislation. I can help explain bills, their impacts, and answer questions about the legislative process. What would you like to know?\",\n        timestamp: new Date().toISOString(),\n        language,\n      },\n      ...prev.slice(1),\n    ]);\n  }, [language, t]);\n\n  return (\n    <section id=\"civica-chat\" className=\"mb-12\">\n      <div className=\"bg-gradient-to-r from-primary/5 to-blue-50 dark:from-slate-800 dark:to-slate-700 rounded-lg p-8 border border-primary/20 dark:border-slate-600\">\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n            <Bot className=\"text-primary-foreground text-xl w-6 h-6\" />\n          </div>\n          <div>\n            <h3 className=\"text-2xl font-bold\">{t(\"Meet Civica\")}</h3>\n            <p className=\"text-muted-foreground\">{t(\"Your AI assistant for understanding legislation\")}</p>\n          </div>\n        </div>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <ScrollArea className=\"h-96 pr-4\">\n              <div className=\"space-y-4\">\n                {messages.map((msg, index) => (\n                  <div\n                    key={index}\n                    className={`flex space-x-3 ${msg.role === \"user\" ? \"justify-end\" : \"\"}`}\n                  >\n                    {msg.role === \"assistant\" && (\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Bot className=\"text-primary-foreground text-sm w-4 h-4\" />\n                      </div>\n                    )}\n                    \n                    <div className={`flex-1 ${msg.role === \"user\" ? \"max-w-xs\" : \"\"}`}>\n                      <div\n                        className={`rounded-lg p-3 ${\n                          msg.role === \"user\"\n                            ? \"bg-primary text-primary-foreground ml-auto\"\n                            : \"bg-muted\"\n                        }`}\n                      >\n                        <MarkdownText content={msg.content} />\n                      </div>\n                      <span className={`text-xs text-muted-foreground mt-1 block ${\n                        msg.role === \"user\" ? \"text-right\" : \"\"\n                      }`}>\n                        {formatTime(msg.timestamp)}\n                      </span>\n                    </div>\n\n                    {msg.role === \"user\" && (\n                      <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center flex-shrink-0\">\n                        <User className=\"text-muted-foreground text-sm w-4 h-4\" />\n                      </div>\n                    )}\n                  </div>\n                ))}\n\n                {sendMessageMutation.isPending && (\n                  <div className=\"flex space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Bot className=\"text-primary-foreground text-sm w-4 h-4\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"bg-muted rounded-lg p-3\">\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse\"></div>\n                          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse delay-100\"></div>\n                          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-pulse delay-200\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n                \n                <div ref={messagesEndRef} />\n              </div>\n            </ScrollArea>\n\n            {/* Chat Input */}\n            <div className=\"border-t border-border pt-4 mt-4\">\n              <div className=\"flex space-x-3\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Ask me anything about legislation...\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      onKeyPress={handleKeyPress}\n                      disabled={sendMessageMutation.isPending}\n                      className=\"pr-20\"\n                    />\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => {\n                          // Toggle language functionality would be implemented here\n                        }}\n                      >\n                        <Globe className=\"h-3 w-3\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => {\n                          // Voice input functionality would be implemented here\n                        }}\n                      >\n                        <Mic className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!message.trim() || sendMessageMutation.isPending}\n                  className=\"px-6\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                </Button>\n              </div>\n\n              {/* Quick suggestions */}\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-7 text-xs\"\n                  onClick={() => handleQuickQuestion(\"How does a bill become a law?\")}\n                  disabled={sendMessageMutation.isPending}\n                >\n                  How does a bill become a law?\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-7 text-xs\"\n                  onClick={() => handleQuickQuestion(\"What's happening in local politics?\")}\n                  disabled={sendMessageMutation.isPending}\n                >\n                  What's happening locally?\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-7 text-xs\"\n                  onClick={() => handleQuickQuestion(\"Can you explain this bill in simple terms?\")}\n                  disabled={sendMessageMutation.isPending}\n                >\n                  Explain a bill\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11590},"client/src/components/community-feedback.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { ThumbsUp, ThumbsDown, MessageSquare, Plus, Calendar, User, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { FeedbackSubmission, FeedbackComment } from \"@shared/schema\";\n\nconst feedbackSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  content: z.string().min(20, \"Content must be at least 20 characters\"),\n  category: z.string().min(1, \"Category is required\"),\n  userEmail: z.string().email(\"Valid email is required\").optional().or(z.literal(\"\")),\n  tags: z.string().optional(),\n});\n\ninterface FeedbackWithComments extends FeedbackSubmission {\n  comments?: FeedbackComment[];\n}\n\nexport function CommunityFeedback() {\n  const [activeTab, setActiveTab] = useState<string>(\"browse\");\n  const [language, setLanguage] = useState<string>(\"en\");\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n  const queryClient = useQueryClient();\n\n  const { data: feedbackData, isLoading } = useQuery({\n    queryKey: [\"/api/feedback\", { isPublic: true }],\n  });\n\n  const submitFeedbackMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof feedbackSchema>) => {\n      const tags = data.tags ? data.tags.split(\",\").map(tag => tag.trim()).filter(Boolean) : [];\n      await apiRequest(\"/api/feedback\", {\n        method: \"POST\",\n        body: {\n          ...data,\n          tags,\n          userEmail: data.userEmail || null,\n        },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n      setActiveTab(\"browse\");\n    },\n  });\n\n  const voteMutation = useMutation({\n    mutationFn: async ({ feedbackId, voteType }: { feedbackId: string; voteType: \"upvote\" | \"downvote\" }) => {\n      await apiRequest(`/api/feedback/${feedbackId}/vote`, {\n        method: \"POST\",\n        body: { voteType, userId: null }, // Anonymous voting for now\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n    },\n  });\n\n  const submissions: FeedbackWithComments[] = feedbackData?.submissions || [];\n\n  const toggleExpanded = (id: string) => {\n    setExpandedItems(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(id)) {\n        newSet.delete(id);\n      } else {\n        newSet.add(id);\n      }\n      return newSet;\n    });\n  };\n\n  const handleVote = async (feedbackId: string, voteType: \"upvote\" | \"downvote\") => {\n    try {\n      await voteMutation.mutateAsync({ feedbackId, voteType });\n    } catch (error) {\n      console.error(\"Error voting:\", error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        <div className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        <div className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          {language === \"es\" ? \"Comentarios de la Comunidad\" : \"Community Feedback\"}\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          {language === \"es\" \n            ? \"Comparte tus ideas y preocupaciones con tu representante\"\n            : \"Share your ideas and concerns with your representative\"\n          }\n        </p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"browse\">\n            {language === \"es\" ? \"Ver Comentarios\" : \"Browse Feedback\"}\n          </TabsTrigger>\n          <TabsTrigger value=\"submit\">\n            {language === \"es\" ? \"Enviar Comentario\" : \"Submit Feedback\"}\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"browse\" className=\"space-y-6\">\n          {submissions.length > 0 ? (\n            submissions.map((submission) => (\n              <FeedbackCard \n                key={submission.id} \n                submission={submission} \n                language={language}\n                isExpanded={expandedItems.has(submission.id)}\n                onToggleExpanded={() => toggleExpanded(submission.id)}\n                onVote={handleVote}\n              />\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"py-8 text-center\">\n                <MessageSquare className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  {language === \"es\" ? \"No hay comentarios aún\" : \"No feedback yet\"}\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  {language === \"es\" \n                    ? \"Sé el primero en compartir tu opinión.\"\n                    : \"Be the first to share your thoughts.\"\n                  }\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"submit\">\n          <FeedbackForm \n            onSubmit={submitFeedbackMutation.mutateAsync}\n            isSubmitting={submitFeedbackMutation.isPending}\n            language={language}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction FeedbackCard({ \n  submission, \n  language, \n  isExpanded, \n  onToggleExpanded, \n  onVote \n}: { \n  submission: FeedbackWithComments; \n  language: string;\n  isExpanded: boolean;\n  onToggleExpanded: () => void;\n  onVote: (feedbackId: string, voteType: \"upvote\" | \"downvote\") => void;\n}) {\n  const getCategoryBadge = (category: string) => {\n    const categoryMap = {\n      bill_feedback: { en: \"Bill Feedback\", es: \"Comentario de Ley\", variant: \"default\" as const },\n      general: { en: \"General\", es: \"General\", variant: \"secondary\" as const },\n      feature_request: { en: \"Feature Request\", es: \"Solicitud\", variant: \"outline\" as const },\n      issue_report: { en: \"Issue Report\", es: \"Reporte\", variant: \"destructive\" as const },\n    };\n    \n    const info = categoryMap[category as keyof typeof categoryMap] || categoryMap.general;\n    return (\n      <Badge variant={info.variant}>\n        {language === \"es\" ? info.es : info.en}\n      </Badge>\n    );\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      pending: { en: \"Pending\", es: \"Pendiente\", variant: \"outline\" as const },\n      reviewed: { en: \"Reviewed\", es: \"Revisado\", variant: \"secondary\" as const },\n      responded: { en: \"Responded\", es: \"Respondido\", variant: \"default\" as const },\n      closed: { en: \"Closed\", es: \"Cerrado\", variant: \"destructive\" as const },\n    };\n    \n    const info = statusMap[status as keyof typeof statusMap] || statusMap.pending;\n    return (\n      <Badge variant={info.variant}>\n        {language === \"es\" ? info.es : info.en}\n      </Badge>\n    );\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-start justify-between gap-4\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg mb-2\">{submission.title}</CardTitle>\n            <div className=\"flex flex-wrap items-center gap-2 mb-3\">\n              {getCategoryBadge(submission.category)}\n              {getStatusBadge(submission.status)}\n              {submission.priority && submission.priority !== \"medium\" && (\n                <Badge variant={submission.priority === \"high\" ? \"destructive\" : \"outline\"}>\n                  {submission.priority === \"high\" ? \n                    (language === \"es\" ? \"Alta Prioridad\" : \"High Priority\") :\n                    (language === \"es\" ? \"Baja Prioridad\" : \"Low Priority\")\n                  }\n                </Badge>\n              )}\n            </div>\n            {submission.tags && submission.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 mb-3\">\n                {submission.tags.map((tag, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n              <Calendar className=\"w-4 h-4\" />\n              <span>{new Date(submission.createdAt).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className={`text-gray-700 dark:text-gray-300 ${isExpanded ? '' : 'line-clamp-3'}`}>\n            {submission.content}\n          </div>\n          \n          {submission.content.length > 200 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onToggleExpanded}\n              className=\"text-blue-600 hover:text-blue-800 p-0 h-auto font-normal\"\n            >\n              {isExpanded ? (\n                <>\n                  <ChevronUp className=\"w-4 h-4 mr-1\" />\n                  {language === \"es\" ? \"Ver menos\" : \"Show less\"}\n                </>\n              ) : (\n                <>\n                  <ChevronDown className=\"w-4 h-4 mr-1\" />\n                  {language === \"es\" ? \"Ver más\" : \"Show more\"}\n                </>\n              )}\n            </Button>\n          )}\n\n          {submission.adminResponse && (\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 p-4 rounded\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <User className=\"w-4 h-4 text-blue-600\" />\n                <span className=\"font-semibold text-blue-900 dark:text-blue-100\">\n                  {language === \"es\" ? \"Respuesta Oficial\" : \"Official Response\"}\n                </span>\n              </div>\n              <p className=\"text-blue-800 dark:text-blue-200\">{submission.adminResponse}</p>\n              {submission.respondedAt && (\n                <p className=\"text-xs text-blue-600 dark:text-blue-300 mt-2\">\n                  {new Date(submission.respondedAt).toLocaleDateString()}\n                </p>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <div className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onVote(submission.id, \"upvote\")}\n                className=\"flex items-center gap-1 text-green-600 hover:text-green-800 hover:bg-green-50 dark:hover:bg-green-900/20\"\n              >\n                <ThumbsUp className=\"w-4 h-4\" />\n                <span>{submission.upvotes}</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onVote(submission.id, \"downvote\")}\n                className=\"flex items-center gap-1 text-red-600 hover:text-red-800 hover:bg-red-50 dark:hover:bg-red-900/20\"\n              >\n                <ThumbsDown className=\"w-4 h-4\" />\n                <span>{submission.downvotes}</span>\n              </Button>\n            </div>\n            \n            <div className=\"text-sm text-muted-foreground\">\n              {language === \"es\" ? \"ID: \" : \"ID: \"}{submission.id.slice(-8)}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction FeedbackForm({ \n  onSubmit, \n  isSubmitting, \n  language \n}: { \n  onSubmit: (data: z.infer<typeof feedbackSchema>) => Promise<void>;\n  isSubmitting: boolean;\n  language: string;\n}) {\n  const form = useForm<z.infer<typeof feedbackSchema>>({\n    resolver: zodResolver(feedbackSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      category: \"\",\n      userEmail: \"\",\n      tags: \"\",\n    },\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {language === \"es\" ? \"Enviar Comentario\" : \"Submit Feedback\"}\n        </CardTitle>\n        <CardDescription>\n          {language === \"es\" \n            ? \"Comparte tus ideas, preocupaciones o sugerencias sobre temas en TX-23.\"\n            : \"Share your ideas, concerns, or suggestions about issues in TX-23.\"\n          }\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    {language === \"es\" ? \"Categoría\" : \"Category\"}\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder={language === \"es\" ? \"Selecciona una categoría\" : \"Select a category\"} />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"general\">\n                        {language === \"es\" ? \"General\" : \"General\"}\n                      </SelectItem>\n                      <SelectItem value=\"bill_feedback\">\n                        {language === \"es\" ? \"Comentario sobre Ley\" : \"Bill Feedback\"}\n                      </SelectItem>\n                      <SelectItem value=\"feature_request\">\n                        {language === \"es\" ? \"Solicitud de Función\" : \"Feature Request\"}\n                      </SelectItem>\n                      <SelectItem value=\"issue_report\">\n                        {language === \"es\" ? \"Reporte de Problema\" : \"Issue Report\"}\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    {language === \"es\" ? \"Título\" : \"Title\"}\n                  </FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder={language === \"es\" ? \"Breve resumen de tu comentario\" : \"Brief summary of your feedback\"} \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"content\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    {language === \"es\" ? \"Contenido\" : \"Content\"}\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder={language === \"es\" ? \"Explica tu comentario en detalle...\" : \"Explain your feedback in detail...\"} \n                      className=\"min-h-[120px]\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"userEmail\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    {language === \"es\" ? \"Email (Opcional)\" : \"Email (Optional)\"}\n                  </FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"email\"\n                      placeholder={language === \"es\" ? \"tu@email.com\" : \"your@email.com\"} \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    {language === \"es\" \n                      ? \"Para recibir actualizaciones sobre tu comentario\"\n                      : \"To receive updates about your feedback\"\n                    }\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"tags\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>\n                    {language === \"es\" ? \"Etiquetas (Opcional)\" : \"Tags (Optional)\"}\n                  </FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder={language === \"es\" ? \"transporte, educación, salud\" : \"transportation, education, healthcare\"} \n                      {...field} \n                    />\n                  </FormControl>\n                  <FormDescription>\n                    {language === \"es\" \n                      ? \"Separa las etiquetas con comas\"\n                      : \"Separate tags with commas\"\n                    }\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n              {isSubmitting ? (\n                language === \"es\" ? \"Enviando...\" : \"Submitting...\"\n              ) : (\n                language === \"es\" ? \"Enviar Comentario\" : \"Submit Feedback\"\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":18642},"client/src/components/community-polls.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { CheckCircle, Clock, MapPin, Users, Vote } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport type { Poll } from \"@shared/schema\";\n\ninterface PollWithResults extends Poll {\n  results?: {\n    pollId: string;\n    totalVotes: number;\n    results: { optionIndex: number; count: number; percentage: number }[];\n  };\n  hasVoted?: boolean;\n}\n\nexport function CommunityPolls() {\n  const [activeCategory, setActiveCategory] = useState<string>(\"all\");\n  const { currentLanguage, t } = useSimpleTranslation();\n  const queryClient = useQueryClient();\n\n  const { data: pollsData, isLoading } = useQuery({\n    queryKey: [\"/api/polls\", { category: activeCategory === \"all\" ? undefined : activeCategory }],\n  });\n\n  const voteMutation = useMutation({\n    mutationFn: async ({ pollId, selectedOptions }: { pollId: string; selectedOptions: number[] }) => {\n      return apiRequest(`/api/polls/${pollId}/vote`, {\n        method: \"POST\",\n        body: { selectedOptions, userId: null }, // Anonymous voting for now\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/polls\"] });\n    },\n  });\n\n  const polls: PollWithResults[] = pollsData?.polls || [];\n  \n  console.log('Polls data received:', { pollsData, pollsCount: polls.length });\n  \n  if (!polls.length) {\n    console.log('No polls found, checking API response:', pollsData);\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        <div className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n        <div className=\"h-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\"></div>\n      </div>\n    );\n  }\n\n  const handleVote = async (pollId: string, selectedOptions: number[]) => {\n    try {\n      await voteMutation.mutateAsync({ pollId, selectedOptions });\n    } catch (error) {\n      console.error(\"Error voting:\", error);\n    }\n  };\n\n  const PollCard = ({ poll }: { poll: PollWithResults }) => {\n    const [selectedOptions, setSelectedOptions] = useState<number[]>([]);\n    const [showResults, setShowResults] = useState(false);\n\n    const handleOptionSelect = (optionIndex: number) => {\n      if (poll.allowMultipleChoice) {\n        setSelectedOptions(prev => \n          prev.includes(optionIndex)\n            ? prev.filter(i => i !== optionIndex)\n            : [...prev, optionIndex]\n        );\n      } else {\n        setSelectedOptions([optionIndex]);\n      }\n    };\n\n    const submitVote = () => {\n      if (selectedOptions.length > 0) {\n        handleVote(poll.id, selectedOptions);\n        setShowResults(true);\n      }\n    };\n\n    const isExpired = poll.endDate && new Date(poll.endDate) < new Date();\n    const daysRemaining = poll.endDate \n      ? Math.ceil((new Date(poll.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))\n      : null;\n\n    return (\n      <Card className=\"w-full\">\n        <CardHeader>\n          <div className=\"flex items-start justify-between gap-4\">\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-lg\">\n                {language === \"es\" ? poll.title : poll.title}\n              </CardTitle>\n              {poll.description && (\n                <CardDescription className=\"mt-2\">\n                  {language === \"es\" ? poll.description : poll.description}\n                </CardDescription>\n              )}\n            </div>\n            <div className=\"flex flex-col gap-2\">\n              <Badge variant={poll.category === \"local\" ? \"default\" : poll.category === \"national\" ? \"secondary\" : \"outline\"}>\n                {poll.category === \"local\" ? (language === \"es\" ? \"Local\" : \"Local\") :\n                 poll.category === \"national\" ? (language === \"es\" ? \"Nacional\" : \"National\") :\n                 (language === \"es\" ? \"Estatal\" : \"State\")}\n              </Badge>\n              {isExpired && (\n                <Badge variant=\"destructive\" className=\"text-xs\">\n                  {language === \"es\" ? \"Expirada\" : \"Expired\"}\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            {poll.location && (\n              <div className=\"flex items-center gap-1\">\n                <MapPin className=\"w-4 h-4\" />\n                <span>{poll.location}</span>\n              </div>\n            )}\n            {daysRemaining !== null && daysRemaining > 0 && (\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"w-4 h-4\" />\n                <span>\n                  {daysRemaining} {language === \"es\" ? \n                    (daysRemaining === 1 ? \"día restante\" : \"días restantes\") :\n                    (daysRemaining === 1 ? \"day left\" : \"days left\")\n                  }\n                </span>\n              </div>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {!showResults && !isExpired ? (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                {poll.options.map((option, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <input\n                      type={poll.allowMultipleChoice ? \"checkbox\" : \"radio\"}\n                      id={`poll-${poll.id}-option-${index}`}\n                      name={`poll-${poll.id}`}\n                      checked={selectedOptions.includes(index)}\n                      onChange={() => handleOptionSelect(index)}\n                      className=\"w-4 h-4\"\n                    />\n                    <label \n                      htmlFor={`poll-${poll.id}-option-${index}`}\n                      className=\"flex-1 cursor-pointer\"\n                    >\n                      {option}\n                    </label>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {poll.allowMultipleChoice ? \n                    \"Select all that apply\" :\n                    \"Select one option\"\n                  }\n                </div>\n                <Button \n                  onClick={submitVote}\n                  disabled={selectedOptions.length === 0 || voteMutation.isPending}\n                  size=\"sm\"\n                >\n                  <Vote className=\"w-4 h-4 mr-2\" />\n                  {t(\"Vote\")}\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <PollResults poll={poll} language={currentLanguage} />\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n          {t(\"Community Polls\")}\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          {t(\"Share your opinion\")} sobre temas importantes en TX-23\n        </p>\n      </div>\n\n      <Tabs value={activeCategory} onValueChange={setActiveCategory} className=\"mb-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"all\">\n            {t(\"All\")}\n          </TabsTrigger>\n          <TabsTrigger value=\"local\">\n            {t(\"Local\")}\n          </TabsTrigger>\n          <TabsTrigger value=\"state\">\n            {t(\"State\")}\n          </TabsTrigger>\n          <TabsTrigger value=\"national\">\n            {t(\"National\")}\n          </TabsTrigger>\n        </TabsList>\n      </Tabs>\n\n      <div className=\"space-y-6\">\n        {polls.length > 0 ? (\n          polls.map((poll) => (\n            <PollCard key={poll.id} poll={poll} />\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"py-8 text-center\">\n              <Users className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                {t(\"No polls available\")}\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                {t(\"There are no active polls\")} in this category right now.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction PollResults({ poll, language }: { poll: PollWithResults; language: string }) {\n  const { data: resultsData } = useQuery({\n    queryKey: [`/api/polls/${poll.id}/results`],\n  });\n\n  const results = resultsData || { totalVotes: 0, results: [] };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"font-semibold\">\n          {language === \"es\" ? \"Resultados\" : \"Results\"}\n        </h4>\n        <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n          <Users className=\"w-4 h-4\" />\n          <span>\n            {results.totalVotes} {language === \"es\" ? \"votos\" : \"votes\"}\n          </span>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {poll.options.map((option, index) => {\n          const result = results.results.find((r: any) => r.optionIndex === index);\n          const percentage = result?.percentage || 0;\n          const count = result?.count || 0;\n          \n          return (\n            <div key={index} className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">{option}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  {count} ({percentage.toFixed(1)}%)\n                </span>\n              </div>\n              <Progress value={percentage} className=\"h-2\" />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":10379},"client/src/components/footer.tsx":{"content":"import { useTranslation } from \"@/hooks/use-translation\";\nimport { Landmark, Heart } from \"lucide-react\";\n\nexport default function Footer() {\n  const { t } = useTranslation();\n\n  return (\n    <footer className=\"bg-gray-900 text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n\n\n        <div className=\"border-t border-gray-800 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-400 text-sm\">\n            © 2025 Built for the Congressional App Challenge.\n          </p>\n          <p className=\"text-gray-400 text-sm mt-2\">\n            Made by Rehan Raj\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":653},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"@/hooks/use-translation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { LanguageToggle } from \"@/components/ui/language-toggle\";\nimport { Search, Bell, User, Landmark } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Header() {\n  const { t } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Title */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Landmark className=\"text-primary-foreground text-lg w-5 h-5\" />\n            </div>\n            <div className=\"hidden sm:block\">\n              <h1 className=\"text-xl font-bold text-foreground\">Connected Civics</h1>\n              <p className=\"text-xs text-muted-foreground\">Civic Engagement Platform</p>\n            </div>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-md mx-4\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Search className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n              <Input\n                type=\"text\"\n                placeholder=\"Search bills, legislators, or topics...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-3\"\n              />\n            </div>\n          </div>\n\n          {/* Navigation and Controls */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Language Toggle */}\n            <LanguageToggle />\n\n            {/* Notifications */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                  <Bell className=\"h-5 w-5\" />\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-4 w-4 text-xs p-0 flex items-center justify-center\"\n                  >\n                    3\n                  </Badge>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-80\">\n                <DropdownMenuItem>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium\">Bill Update</p>\n                    <p className=\"text-xs text-muted-foreground\">H.R. 1234 passed committee review</p>\n                  </div>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium\">Local Event</p>\n                    <p className=\"text-xs text-muted-foreground\">City council meeting tomorrow</p>\n                  </div>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <div className=\"flex flex-col space-y-1\">\n                    <p className=\"text-sm font-medium\">Breaking News</p>\n                    <p className=\"text-xs text-muted-foreground\">Senate votes on climate bill</p>\n                  </div>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* User Menu */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                    <User className=\"text-primary-foreground text-sm w-4 h-4\" />\n                  </div>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem>Profile</DropdownMenuItem>\n                <DropdownMenuItem>Bookmarks</DropdownMenuItem>\n                <DropdownMenuItem>Settings</DropdownMenuItem>\n                <DropdownMenuItem>Sign Out</DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4670},"client/src/components/legislator-tracker.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport { useLocation } from \"@/hooks/use-location\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Users, Search, Mail, Plus, User } from \"lucide-react\";\nimport type { Legislator } from \"@shared/schema\";\n\nexport default function LegislatorTracker() {\n  const { location } = useLocation();\n  const { t } = useSimpleTranslation();\n\n  const { data: legislatorsData, isLoading, error } = useQuery({\n    queryKey: [\"/api/legislators\", location.state, location.district],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (location.state) params.append(\"state\", location.state);\n      if (location.district) params.append(\"district\", location.district);\n      params.append(\"limit\", \"10\");\n      \n      const response = await fetch(`/api/legislators?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch legislators\");\n      return response.json();\n    },\n    enabled: !!location.state, // Only fetch if we have location data\n  });\n\n  const legislators = legislatorsData?.legislators || [];\n\n  const getPartyColor = (party: string) => {\n    switch (party?.toLowerCase()) {\n      case \"democratic\":\n        return \"text-blue-600\";\n      case \"republican\":\n        return \"text-red-600\";\n      case \"independent\":\n        return \"text-purple-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  if (error) {\n    return (\n      <section id=\"legislators\" className=\"mb-12\">\n        <div className=\"text-center py-8\">\n          <p className=\"text-destructive\">Error: {(error as Error).message}</p>\n          <Button variant=\"outline\" onClick={() => window.location.reload()} className=\"mt-4\">\n            Retry\n          </Button>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"legislators\" className=\"mb-12\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-2xl font-bold flex items-center\">\n          <Users className=\"w-6 h-6 mr-3 text-primary\" />\n          {t(\"Your Representatives\")}\n        </h3>\n        <Button variant=\"outline\">\n          <Search className=\"w-4 h-4 mr-1\" />\n          Find All Reps\n        </Button>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4 mb-4\">\n                  <Skeleton className=\"w-16 h-16 rounded-full\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-3 w-1/2\" />\n                    <Skeleton className=\"h-3 w-2/3\" />\n                  </div>\n                </div>\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, j) => (\n                    <div key={j} className=\"flex justify-between\">\n                      <Skeleton className=\"h-3 w-1/3\" />\n                      <Skeleton className=\"h-3 w-1/4\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {legislators.map((legislator: Legislator) => (\n            <LegislatorCard key={legislator.id} legislator={legislator} />\n          ))}\n          \n          {legislators.length === 0 && (\n            <div className=\"col-span-full text-center py-8\">\n              <p className=\"text-muted-foreground\">\n                {location.state \n                  ? \"No representatives found for your location.\"\n                  : \"Please set your location to see your representatives.\"\n                }\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n    </section>\n  );\n}\n\nfunction LegislatorCard({ legislator }: { legislator: Legislator }) {\n  const { t } = useSimpleTranslation();\n\n  const getPartyColor = (party: string) => {\n    switch (party?.toLowerCase()) {\n      case \"democratic\":\n        return \"text-blue-600\";\n      case \"republican\":\n        return \"text-red-600\";\n      case \"independent\":\n        return \"text-purple-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  const getActivityText = (activity: { action: string; bill: string; date: string }) => {\n    const actionMap: Record<string, string> = {\n      \"Voted Yes\": t(\"Voted Yes on\"),\n      \"Voted No\": t(\"Voted No on\"), \n      \"Sponsored\": t(\"Sponsored on\"),\n      \"Co-sponsored\": t(\"Co-sponsored\"),\n      \"Proposed\": t(\"Proposed\"),\n      \"Signed\": t(\"Signed\"),\n    };\n\n    return actionMap[activity.action] || activity.action;\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start space-x-4 mb-4\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center\">\n            {legislator.imageUrl ? (\n              <img \n                src={legislator.imageUrl} \n                alt={legislator.name}\n                className=\"w-16 h-16 rounded-full object-cover\"\n                onError={(e) => {\n                  // If image fails to load, show placeholder\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                  target.nextElementSibling?.classList.remove('hidden');\n                }}\n              />\n            ) : null}\n            <User className={`w-8 h-8 text-muted-foreground ${legislator.imageUrl ? 'hidden' : ''}`} />\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"text-lg font-semibold\">{legislator.name}</h4>\n            <p className=\"text-sm text-muted-foreground\">{legislator.office}</p>\n            <p className=\"text-sm text-muted-foreground\">\n              {legislator.district && `District ${legislator.district}, `}{legislator.state}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-3 mb-4\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">{t(\"Party\")}</span>\n            <span className={`font-medium ${getPartyColor(legislator.party || \"\")}`}>\n              {legislator.party}\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">{t(\"Years in Office\")}</span>\n            <span className=\"font-medium\">{legislator.yearsInOffice}</span>\n          </div>\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">{t(\"Bills Sponsored\")}</span>\n            <span className=\"font-medium\">{legislator.billsSponsored}</span>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border pt-4\">\n          <h5 className=\"text-sm font-medium mb-2\">{t(\"Recent Activity\")}</h5>\n          <div className=\"space-y-2\">\n            {legislator.recentActivity?.slice(0, 2).map((activity, index) => (\n              <div key={index} className=\"text-xs text-muted-foreground\">\n                <span className=\"font-medium\">{getActivityText(activity)}</span> on {activity.bill}\n              </div>\n            )) || (\n              <p className=\"text-xs text-muted-foreground\">{t(\"No recent activity\")}</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex space-x-2 mt-4\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={() => window.open(`mailto:${legislator.email}`, '_blank')}\n          >\n            <Mail className=\"w-4 h-4 mr-1\" />\n            {t(\"Contact\")}\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            className=\"flex-1\"\n            onClick={() => {\n              // Link to official Congressional/Senate websites\n              const officialUrl = legislator.name.includes('Tony Gonzales') \n                ? 'https://gonzales.house.gov/' \n                : legislator.name.includes('John Cornyn')\n                ? 'https://www.cornyn.senate.gov/'\n                : legislator.name.includes('Ted Cruz')\n                ? 'https://www.cruz.senate.gov/'\n                : legislator.website;\n              if (officialUrl) window.open(officialUrl, '_blank');\n            }}\n          >\n            <Plus className=\"w-4 h-4 mr-1\" />\n            {t(\"More Info\")}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8931},"client/src/components/location-selector.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"@/hooks/use-location\";\nimport { useTranslation } from \"@/hooks/use-translation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { MapPin, Settings } from \"lucide-react\";\n\nconst TEXAS_DISTRICTS = [\n  { value: \"TX-01\", label: \"TX-01 - East Texas\" },\n  { value: \"TX-02\", label: \"TX-02 - Southeast Texas\" },\n  { value: \"TX-03\", label: \"TX-03 - North Dallas\" },\n  { value: \"TX-04\", label: \"TX-04 - Northeast Texas\" },\n  { value: \"TX-05\", label: \"TX-05 - East Dallas\" },\n  { value: \"TX-06\", label: \"TX-06 - Arlington/Mansfield\" },\n  { value: \"TX-07\", label: \"TX-07 - West Houston\" },\n  { value: \"TX-08\", label: \"TX-08 - North Houston\" },\n  { value: \"TX-09\", label: \"TX-09 - Southeast Houston\" },\n  { value: \"TX-10\", label: \"TX-10 - Austin/Tomball\" },\n  { value: \"TX-11\", label: \"TX-11 - West Texas\" },\n  { value: \"TX-12\", label: \"TX-12 - Fort Worth\" },\n  { value: \"TX-13\", label: \"TX-13 - Panhandle\" },\n  { value: \"TX-14\", label: \"TX-14 - Southeast Coast\" },\n  { value: \"TX-15\", label: \"TX-15 - South Texas\" },\n  { value: \"TX-16\", label: \"TX-16 - El Paso\" },\n  { value: \"TX-17\", label: \"TX-17 - Central Texas\" },\n  { value: \"TX-18\", label: \"TX-18 - Inner Houston\" },\n  { value: \"TX-19\", label: \"TX-19 - Lubbock\" },\n  { value: \"TX-20\", label: \"TX-20 - San Antonio West\" },\n  { value: \"TX-21\", label: \"TX-21 - Austin/San Antonio\" },\n  { value: \"TX-22\", label: \"TX-22 - Southwest Houston\" },\n  { value: \"TX-23\", label: \"TX-23 - San Antonio/Border\" },\n  { value: \"TX-24\", label: \"TX-24 - North Dallas\" },\n  { value: \"TX-25\", label: \"TX-25 - Austin/Fort Hood\" },\n  { value: \"TX-26\", label: \"TX-26 - North Texas\" },\n  { value: \"TX-27\", label: \"TX-27 - Corpus Christi\" },\n  { value: \"TX-28\", label: \"TX-28 - South Texas\" },\n  { value: \"TX-29\", label: \"TX-29 - North Houston\" },\n  { value: \"TX-30\", label: \"TX-30 - South Dallas\" },\n  { value: \"TX-31\", label: \"TX-31 - Central Texas\" },\n  { value: \"TX-32\", label: \"TX-32 - North Dallas\" },\n  { value: \"TX-33\", label: \"TX-33 - Dallas/Fort Worth\" },\n  { value: \"TX-34\", label: \"TX-34 - South Texas\" },\n  { value: \"TX-35\", label: \"TX-35 - Austin/San Antonio\" },\n  { value: \"TX-36\", label: \"TX-36 - Southeast Texas\" },\n  { value: \"TX-37\", label: \"TX-37 - Central Texas\" },\n  { value: \"TX-38\", label: \"TX-38 - North Texas\" },\n];\n\nexport default function LocationSelector() {\n  const { location, updateLocation } = useLocation();\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n  const [tempLocation, setTempLocation] = useState({\n    city: location.city || \"\",\n    state: location.state || \"\",\n    district: location.district || \"\",\n  });\n\n  const handleSave = () => {\n    updateLocation(tempLocation);\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\n          <MapPin className=\"w-4 h-4\" />\n          {location.city && location.state ? (\n            `${location.city}, ${location.state}`\n          ) : (\n            \"Set Location\"\n          )}\n          <Settings className=\"w-3 h-3\" />\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Update Your Location</DialogTitle>\n          <DialogDescription>\n            Set your location to get relevant bills and representatives for your area.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"city\">City</Label>\n            <Input\n              id=\"city\"\n              value={tempLocation.city}\n              onChange={(e) => setTempLocation(prev => ({ ...prev, city: e.target.value }))}\n              placeholder=\"Enter your city\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"state\">State</Label>\n            <Input\n              id=\"state\"\n              value={tempLocation.state}\n              onChange={(e) => setTempLocation(prev => ({ ...prev, state: e.target.value }))}\n              placeholder=\"Enter your state\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"district\">Congressional District</Label>\n            <Select\n              value={tempLocation.district}\n              onValueChange={(value) => setTempLocation(prev => ({ ...prev, district: value }))}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select your district\" />\n              </SelectTrigger>\n              <SelectContent>\n                {TEXAS_DISTRICTS.map((district) => (\n                  <SelectItem key={district.value} value={district.value}>\n                    {district.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2 mt-6\">\n          <Button variant=\"outline\" onClick={() => setOpen(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSave}>\n            Save Location\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5650},"client/src/components/news-aggregator.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Newspaper, ExternalLink, Bot } from \"lucide-react\";\nimport type { NewsArticle } from \"@shared/schema\";\n\nexport default function NewsAggregator() {\n  const { t } = useSimpleTranslation();\n  const [activeCategory, setActiveCategory] = useState(\"breaking\");\n  const [showAll, setShowAll] = useState(false);\n  \n  // Reset showAll when category changes\n  const handleCategoryChange = (category: string) => {\n    setActiveCategory(category);\n    setShowAll(false);\n  };\n\n  const { data: newsData, isLoading, error } = useQuery({\n    queryKey: [\"/api/news\", activeCategory],\n    queryFn: async () => {\n      const endpoint = activeCategory === \"breaking\" \n        ? \"/api/news/breaking\" \n        : `/api/news?category=${activeCategory}`;\n      \n      const response = await fetch(endpoint);\n      if (!response.ok) throw new Error(\"Failed to fetch news\");\n      return response.json();\n    },\n  });\n\n  const articles = newsData?.articles || [];\n\n  const categories = [\n    { key: \"breaking\", label: t(\"Breaking\") },\n    { key: \"local\", label: t(\"Local\") },\n    { key: \"national\", label: t(\"National\") },\n    { key: \"explainer\", label: t(\"Explainer\") },\n  ];\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"breaking\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      case \"local\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400\";\n      case \"national\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"explainer\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  const formatTimeAgo = (date: Date | null | undefined) => {\n    if (!date) return \"\";\n    \n    const now = new Date();\n    const publishedDate = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays}d ago`;\n  };\n\n  if (error) {\n    return (\n      <section id=\"news\" className=\"mb-12\">\n        <div className=\"text-center py-8\">\n          <p className=\"text-destructive\">Error: {(error as Error).message}</p>\n          <Button variant=\"outline\" onClick={() => window.location.reload()} className=\"mt-4\">\n            Retry\n          </Button>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"news\" className=\"mb-12\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h3 className=\"text-2xl font-bold flex items-center\">\n          <Newspaper className=\"w-6 h-6 mr-3 text-primary\" />\n          {t(\"Civic News\")}\n        </h3>\n        <div className=\"flex space-x-2\">\n          {categories.map((category) => (\n            <Button\n              key={category.key}\n              variant={activeCategory === category.key ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setActiveCategory(category.key)}\n            >\n              {category.label}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i}>\n              <Skeleton className=\"h-48 w-full rounded-t-lg\" />\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                <Skeleton className=\"h-4 w-1/2 mb-4\" />\n                <Skeleton className=\"h-20 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {(showAll ? articles : articles.slice(0, 3)).map((article: NewsArticle, index: number) => (\n              <NewsCard key={article.id} article={article} featured={index === 0} />\n            ))}\n            \n            {articles.length === 0 && (\n              <div className=\"col-span-full text-center py-8\">\n                <p className=\"text-muted-foreground\">No news articles found for this category.</p>\n              </div>\n            )}\n          </div>\n          \n          {articles.length > 3 && !showAll && (\n            <div className=\"text-center mt-8\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowAll(true)}\n                className=\"px-8\"\n              >\n                Show More Articles ({articles.length - 3} more)\n              </Button>\n            </div>\n          )}\n          \n          {showAll && articles.length > 3 && (\n            <div className=\"text-center mt-8\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowAll(false)}\n                className=\"px-8\"\n              >\n                Show Less\n              </Button>\n            </div>\n          )}\n        </>\n      )}\n    </section>\n  );\n}\n\nfunction NewsCard({ article, featured = false }: { article: NewsArticle; featured?: boolean }) {\n  const { t } = useSimpleTranslation();\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"breaking\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n      case \"local\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400\";\n      case \"national\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\";\n      case \"explainer\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  const formatTimeAgo = (date: Date | null | undefined) => {\n    if (!date) return \"\";\n    \n    const now = new Date();\n    const publishedDate = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - publishedDate.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    return `${diffInDays}d ago`;\n  };\n\n  return (\n    <Card className={`hover:shadow-md transition-shadow ${featured ? \"md:col-span-2 lg:col-span-1\" : \"\"}`}>\n      {article.imageUrl && (\n        <div className=\"relative\">\n          <img \n            src={article.imageUrl} \n            alt={article.title}\n            className={`w-full object-cover rounded-t-lg ${featured ? \"h-64\" : \"h-48\"}`}\n          />\n        </div>\n      )}\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center space-x-2 mb-3\">\n          <Badge className={getCategoryColor(article.category || \"national\")}>\n            {article.category?.toUpperCase() || \"NEWS\"}\n          </Badge>\n          <span className=\"text-xs text-muted-foreground\">{article.source}</span>\n          <span className=\"text-xs text-muted-foreground\">\n            {formatTimeAgo(article.publishedAt)}\n          </span>\n        </div>\n        \n        <h4 className={`font-semibold mb-2 ${featured ? \"text-xl\" : \"text-lg\"}`}>\n          {article.title}\n        </h4>\n        \n        <p className=\"text-muted-foreground text-sm mb-4 line-clamp-3\">\n          {article.summary}\n        </p>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex space-x-2\">\n            {article.tags && article.tags.slice(0, 2).map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <Bot className=\"w-4 h-4 mr-1\" />\n              Ask AI\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" asChild>\n              <a href={article.url} target=\"_blank\" rel=\"noopener noreferrer\" title=\"Read full article\">\n                <ExternalLink className=\"w-4 h-4\" />\n              </a>\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8732},"client/src/hooks/use-location.ts":{"content":"import { useState, useEffect } from \"react\";\n\nexport interface UserLocation {\n  city?: string;\n  state?: string;\n  district?: string;\n  latitude?: number;\n  longitude?: number;\n  error?: string;\n}\n\nexport function useLocation() {\n  const [location, setLocation] = useState<UserLocation>({});\n  const [loading, setLoading] = useState(false);\n\n  const detectLocation = async () => {\n    setLoading(true);\n    \n    try {\n      if (!navigator.geolocation) {\n        throw new Error(\"Geolocation is not supported by this browser\");\n      }\n\n      const position = await new Promise<GeolocationPosition>((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject, {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 300000, // 5 minutes\n        });\n      });\n\n      const { latitude, longitude } = position.coords;\n\n      // Use a reverse geocoding service to get location details\n      // For now, we'll use a mock implementation\n      const locationData = await reverseGeocode(latitude, longitude);\n      \n      const newLocation: UserLocation = {\n        latitude,\n        longitude,\n        ...locationData,\n      };\n\n      setLocation(newLocation);\n      \n      // Store in localStorage for persistence\n      localStorage.setItem(\"userLocation\", JSON.stringify(newLocation));\n      \n    } catch (error) {\n      console.error(\"Error detecting location:\", error);\n      setLocation({\n        error: error instanceof Error ? error.message : \"Failed to detect location\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateLocation = (newLocation: Partial<UserLocation>) => {\n    const updatedLocation = { ...location, ...newLocation };\n    setLocation(updatedLocation);\n    localStorage.setItem(\"userLocation\", JSON.stringify(updatedLocation));\n  };\n\n  const clearLocation = () => {\n    setLocation({});\n    localStorage.removeItem(\"userLocation\");\n  };\n\n  useEffect(() => {\n    // Load location from localStorage on mount or set default\n    const savedLocation = localStorage.getItem(\"userLocation\");\n    if (savedLocation) {\n      try {\n        setLocation(JSON.parse(savedLocation));\n      } catch (error) {\n        console.error(\"Error parsing saved location:\", error);\n        localStorage.removeItem(\"userLocation\");\n        // Set default San Antonio location\n        setLocation({\n          city: \"San Antonio\",\n          state: \"Texas\", \n          district: \"TX-23\",\n          latitude: 29.4241,\n          longitude: -98.4936,\n        });\n      }\n    } else {\n      // Set default San Antonio location\n      setLocation({\n        city: \"San Antonio\",\n        state: \"Texas\",\n        district: \"TX-23\", \n        latitude: 29.4241,\n        longitude: -98.4936,\n      });\n    }\n  }, []);\n\n  return {\n    location,\n    loading,\n    detectLocation,\n    updateLocation,\n    clearLocation,\n  };\n}\n\n// Mock reverse geocoding function\n// In a real implementation, you would use a service like Google Maps Geocoding API\nasync function reverseGeocode(latitude: number, longitude: number): Promise<Partial<UserLocation>> {\n  // Mock implementation for demonstration\n  // This would typically make an API call to a geocoding service\n  \n  // For demo purposes, return San Francisco data if coordinates are in that area\n  if (latitude >= 37.7 && latitude <= 37.8 && longitude >= -122.5 && longitude <= -122.4) {\n    return {\n      city: \"San Francisco\",\n      state: \"CA\",\n      district: \"11\",\n    };\n  }\n\n  // Default to San Antonio, Texas for other locations\n  return {\n    city: \"San Antonio\",\n    state: \"Texas\",\n    district: \"TX-23\",\n  };\n}\n","size_bytes":3625},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-translation.ts":{"content":"import { useState, useCallback } from \"react\";\nimport { translations, type TranslationKey, type Language } from \"@/lib/i18n\";\n\nexport function useTranslation() {\n  const [language, setLanguage] = useState<Language>(() => {\n    const saved = localStorage.getItem(\"preferredLanguage\");\n    return (saved as Language) || \"en\";\n  });\n\n  const t = useCallback((key: TranslationKey, params?: Record<string, string | number>): string => {\n    try {\n      const keys = key.split('.');\n      let translation: any = translations[language];\n      \n      // Navigate through nested keys\n      for (const k of keys) {\n        if (translation && typeof translation === 'object' && k in translation) {\n          translation = translation[k];\n        } else {\n          // Fallback to English\n          translation = translations.en;\n          for (const fallbackKey of keys) {\n            if (translation && typeof translation === 'object' && fallbackKey in translation) {\n              translation = translation[fallbackKey];\n            } else {\n              console.warn(`Translation key not found: ${key}`);\n              return key; // Return the key if not found\n            }\n          }\n          break;\n        }\n      }\n      \n      // Ensure we have a string result\n      if (typeof translation !== 'string') {\n        console.warn(`Translation is not a string for key: ${key}`, translation);\n        return key;\n      }\n      \n      // Handle parameter substitution\n      if (params && typeof translation === \"string\") {\n        Object.entries(params).forEach(([param, value]) => {\n          translation = translation.replace(`{${param}}`, String(value));\n        });\n      }\n      \n      return translation;\n    } catch (error) {\n      console.error(`Error translating key: ${key}`, error);\n      return key;\n    }\n  }, [language]);\n\n  const changeLanguage = useCallback((newLanguage: Language) => {\n    setLanguage(newLanguage);\n    localStorage.setItem(\"preferredLanguage\", newLanguage);\n  }, []);\n\n  const toggleLanguage = useCallback(() => {\n    const newLanguage = language === \"en\" ? \"es\" : \"en\";\n    changeLanguage(newLanguage);\n  }, [language, changeLanguage]);\n\n  return {\n    language,\n    t,\n    changeLanguage,\n    toggleLanguage,\n    isSpanish: language === \"es\",\n  };\n}\n","size_bytes":2283},"client/src/lib/i18n.ts":{"content":"export const translations = {\n  en: {\n    // Navigation\n    \"nav.bills\": \"Bills\",\n    \"nav.news\": \"News\",\n    \"nav.legislators\": \"Legislators\",\n    \"nav.engage\": \"Engage\",\n    \"nav.education\": \"Learn\",\n\n    // Header\n    \"header.title\": \"Connected Civics\",\n    \"header.subtitle\": \"Civic Engagement Platform\",\n    \"header.search\": \"Search bills, legislators, or topics...\",\n\n    // Hero Section\n    \"hero.title\": \"Stay Connected to Your Democracy\",\n    \"hero.subtitle\": \"Track legislation, understand complex bills with AI assistance, and engage with your representatives—all in English and Spanish.\",\n    \"hero.location\": \"Your Location\",\n    \"hero.updateLocation\": \"Update Location\",\n    \"hero.activeBills\": \"Active Bills\",\n    \"hero.recentUpdates\": \"Recent Updates\",\n    \"hero.localBills\": \"Local Bills\",\n\n    // Bills\n    \"bills.title\": \"Recent Bills\",\n    \"bills.filterTitle\": \"Filter Bills\",\n    \"bills.status\": \"Status\",\n    \"bills.category\": \"Category\",\n    \"bills.jurisdiction\": \"Jurisdiction\",\n    \"bills.active\": \"Active\",\n    \"bills.passed\": \"Passed\",\n    \"bills.failed\": \"Failed\",\n    \"bills.allCategories\": \"All Categories\",\n    \"bills.allLevels\": \"All Levels\",\n    \"bills.federal\": \"Federal\",\n    \"bills.state\": \"State\",\n    \"bills.local\": \"Local\",\n    \"bills.clearFilters\": \"Clear All Filters\",\n    \"bills.save\": \"Save\",\n    \"bills.share\": \"Share\",\n    \"bills.viewDetails\": \"View Details\",\n    \"bills.loadMore\": \"Load More Bills\",\n    \"bills.progress\": \"Bill Progress\",\n    \"bills.introduced\": \"Introduced\",\n    \"bills.house\": \"House\",\n    \"bills.senate\": \"Senate\",\n    \"bills.signed\": \"Signed\",\n\n    // News\n    \"news.title\": \"Civic News\",\n    \"news.breaking\": \"Breaking\",\n    \"news.local\": \"Local\",\n    \"news.national\": \"National\",\n    \"news.explainer\": \"Explainer\",\n    \"news.readMore\": \"Read More\",\n\n    // Civica Chatbot\n    \"civica.title\": \"Meet Civica\",\n    \"civica.subtitle\": \"Your AI assistant for understanding legislation\",\n    \"civica.placeholder\": \"Ask Civica about any bill or legislative topic...\",\n    \"civica.send\": \"Send\",\n    \"civica.greeting\": \"Hello! I'm Civica, your AI assistant for understanding legislation. I can help explain bills, their impacts, and answer questions about the legislative process. What would you like to know?\",\n    \"civica.quickQuestions\": {\n      \"howBillBecomesLaw\": \"How does a bill become law?\",\n      \"localNews\": \"What's happening locally?\",\n      \"explainBill\": \"Explain this bill simply\"\n    },\n\n    // Legislators\n    \"legislators.title\": \"Your Representatives\",\n    \"legislators.findAll\": \"Find All Reps\",\n    \"legislators.party\": \"Party\",\n    \"legislators.yearsInOffice\": \"Years in Office\",\n    \"legislators.billsSponsored\": \"Bills Sponsored\",\n    \"legislators.recentActivity\": \"Recent Activity\",\n    \"legislators.contact\": \"Contact\",\n    \"legislators.track\": \"Track\",\n    \"legislators.votedYes\": \"Voted Yes\",\n    \"legislators.votedNo\": \"Voted No\",\n    \"legislators.sponsored\": \"Sponsored\",\n    \"legislators.coSponsored\": \"Co-sponsored\",\n    \"legislators.proposed\": \"Proposed\",\n    \"legislators.signed\": \"Signed\",\n\n    // Civic Engagement\n    \"engage.title\": \"Take Action\",\n    \"engage.contactReps\": \"Contact Your Reps\",\n    \"engage.contactRepsDesc\": \"Send emails to your representatives about bills you care about. We'll help you write effective messages.\",\n    \"engage.selectBill\": \"Select a bill to discuss\",\n    \"engage.generateTemplate\": \"Generate Email Template\",\n    \"engage.upcomingEvents\": \"Upcoming Events\",\n    \"engage.upcomingEventsDesc\": \"Find town halls, public hearings, and other civic events in your area.\",\n    \"engage.viewAllEvents\": \"View All Events\",\n    \"engage.voterInfo\": \"Voting Info\",\n    \"engage.voterInfoDesc\": \"Find your polling location, registration status, and upcoming elections.\",\n    \"engage.checkRegistration\": \"Check Registration\",\n    \"engage.electionSoon\": \"Election in {days} days\",\n\n    // Civic Education\n    \"education.title\": \"Civic Education\",\n    \"education.howBillBecomesLaw\": \"How a Bill Becomes Law\",\n    \"education.introduction\": \"Introduction\",\n    \"education.introductionDesc\": \"Bill is introduced in House or Senate\",\n    \"education.committeeReview\": \"Committee Review\",\n    \"education.committeeReviewDesc\": \"Committee studies and marks up bill\",\n    \"education.floorVote\": \"Floor Vote\",\n    \"education.floorVoteDesc\": \"Full chamber debates and votes\",\n    \"education.startTutorial\": \"Start Interactive Tutorial\",\n    \"education.testKnowledge\": \"Test Your Knowledge\",\n    \"education.quiz\": \"Quick Quiz: Legislative Basics\",\n    \"education.quizQuestion\": \"How many votes are needed to override a presidential veto?\",\n    \"education.quizOptions\": {\n      \"simpleMajority\": \"Simple majority (51%)\",\n      \"twoThirds\": \"Two-thirds majority (67%)\",\n      \"threeQuarters\": \"Three-fourths majority (75%)\"\n    },\n    \"education.submitAnswer\": \"Submit Answer\",\n    \"education.takeFullQuiz\": \"Take Full Quiz\",\n\n    // Common\n    \"common.loading\": \"Loading...\",\n    \"common.error\": \"An error occurred\",\n    \"common.retry\": \"Retry\",\n    \"common.close\": \"Close\",\n    \"common.save\": \"Save\",\n    \"common.cancel\": \"Cancel\",\n    \"common.delete\": \"Delete\",\n    \"common.edit\": \"Edit\",\n    \"common.view\": \"View\",\n    \"common.search\": \"Search\",\n    \"common.filter\": \"Filter\",\n    \"common.sort\": \"Sort\",\n    \"common.date\": \"Date\",\n    \"common.category\": \"Category\",\n    \"common.status\": \"Status\",\n    \"common.source\": \"Source\",\n    \"common.author\": \"Author\",\n    \"common.updated\": \"Updated\",\n    \"common.created\": \"Created\",\n  },\n\n  es: {\n    // Navigation\n    \"nav.bills\": \"Proyectos de Ley\",\n    \"nav.news\": \"Noticias\",\n    \"nav.legislators\": \"Legisladores\",\n    \"nav.engage\": \"Participar\",\n    \"nav.education\": \"Aprender\",\n\n    // Header\n    \"header.title\": \"Civismo Conectado\",\n    \"header.subtitle\": \"Plataforma de Participación Cívica\",\n    \"header.search\": \"Buscar proyectos de ley, legisladores o temas...\",\n\n    // Hero Section\n    \"hero.title\": \"Mantente Conectado con tu Democracia\",\n    \"hero.subtitle\": \"Rastrea la legislación, entiende proyectos de ley complejos con asistencia de IA, y participa con tus representantes—todo en inglés y español.\",\n    \"hero.location\": \"Tu Ubicación\",\n    \"hero.updateLocation\": \"Actualizar Ubicación\",\n    \"hero.activeBills\": \"Proyectos Activos\",\n    \"hero.recentUpdates\": \"Actualizaciones Recientes\",\n    \"hero.localBills\": \"Proyectos Locales\",\n\n    // Bills\n    \"bills.title\": \"Proyectos de Ley Recientes\",\n    \"bills.filterTitle\": \"Filtrar Proyectos\",\n    \"bills.status\": \"Estado\",\n    \"bills.category\": \"Categoría\",\n    \"bills.jurisdiction\": \"Jurisdicción\",\n    \"bills.active\": \"Activo\",\n    \"bills.passed\": \"Aprobado\",\n    \"bills.failed\": \"Rechazado\",\n    \"bills.allCategories\": \"Todas las Categorías\",\n    \"bills.allLevels\": \"Todos los Niveles\",\n    \"bills.federal\": \"Federal\",\n    \"bills.state\": \"Estatal\",\n    \"bills.local\": \"Local\",\n    \"bills.clearFilters\": \"Limpiar Filtros\",\n    \"bills.save\": \"Guardar\",\n    \"bills.share\": \"Compartir\",\n    \"bills.viewDetails\": \"Ver Detalles\",\n    \"bills.loadMore\": \"Cargar Más Proyectos\",\n    \"bills.progress\": \"Progreso del Proyecto\",\n    \"bills.introduced\": \"Introducido\",\n    \"bills.house\": \"Cámara\",\n    \"bills.senate\": \"Senado\",\n    \"bills.signed\": \"Firmado\",\n\n    // News\n    \"news.title\": \"Noticias Cívicas\",\n    \"news.breaking\": \"Última Hora\",\n    \"news.local\": \"Local\",\n    \"news.national\": \"Nacional\",\n    \"news.explainer\": \"Explicativo\",\n    \"news.readMore\": \"Leer Más\",\n\n    // Civica Chatbot\n    \"civica.title\": \"Conoce a Cívica\",\n    \"civica.subtitle\": \"Tu asistente de IA para entender la legislación\",\n    \"civica.placeholder\": \"Pregúntale a Cívica sobre cualquier proyecto de ley o tema legislativo...\",\n    \"civica.send\": \"Enviar\",\n    \"civica.greeting\": \"¡Hola! Soy Cívica, tu asistente de IA para entender la legislación. Puedo ayudar a explicar proyectos de ley, sus impactos, y responder preguntas sobre el proceso legislativo. ¿Qué te gustaría saber?\",\n    \"civica.quickQuestions\": {\n      \"howBillBecomesLaw\": \"¿Cómo se convierte un proyecto en ley?\",\n      \"localNews\": \"¿Qué está pasando localmente?\",\n      \"explainBill\": \"Explica este proyecto simplemente\"\n    },\n\n    // Legislators\n    \"legislators.title\": \"Tus Representantes\",\n    \"legislators.findAll\": \"Encontrar Todos\",\n    \"legislators.party\": \"Partido\",\n    \"legislators.yearsInOffice\": \"Años en el Cargo\",\n    \"legislators.billsSponsored\": \"Proyectos Patrocinados\",\n    \"legislators.recentActivity\": \"Actividad Reciente\",\n    \"legislators.contact\": \"Contactar\",\n    \"legislators.track\": \"Seguir\",\n    \"legislators.votedYes\": \"Votó Sí\",\n    \"legislators.votedNo\": \"Votó No\",\n    \"legislators.sponsored\": \"Patrocinó\",\n    \"legislators.coSponsored\": \"Co-patrocinó\",\n    \"legislators.proposed\": \"Propuso\",\n    \"legislators.signed\": \"Firmó\",\n\n    // Civic Engagement\n    \"engage.title\": \"Tomar Acción\",\n    \"engage.contactReps\": \"Contacta a tus Representantes\",\n    \"engage.contactRepsDesc\": \"Envía correos electrónicos a tus representantes sobre proyectos que te importan. Te ayudaremos a escribir mensajes efectivos.\",\n    \"engage.selectBill\": \"Selecciona un proyecto para discutir\",\n    \"engage.generateTemplate\": \"Generar Plantilla de Correo\",\n    \"engage.upcomingEvents\": \"Eventos Próximos\",\n    \"engage.upcomingEventsDesc\": \"Encuentra asambleas públicas, audiencias y otros eventos cívicos en tu área.\",\n    \"engage.viewAllEvents\": \"Ver Todos los Eventos\",\n    \"engage.voterInfo\": \"Información de Votación\",\n    \"engage.voterInfoDesc\": \"Encuentra tu lugar de votación, estado de registro y próximas elecciones.\",\n    \"engage.checkRegistration\": \"Verificar Registro\",\n    \"engage.electionSoon\": \"Elección en {days} días\",\n\n    // Civic Education\n    \"education.title\": \"Educación Cívica\",\n    \"education.howBillBecomesLaw\": \"Cómo un Proyecto se Convierte en Ley\",\n    \"education.introduction\": \"Introducción\",\n    \"education.introductionDesc\": \"El proyecto se introduce en la Cámara o Senado\",\n    \"education.committeeReview\": \"Revisión del Comité\",\n    \"education.committeeReviewDesc\": \"El comité estudia y marca el proyecto\",\n    \"education.floorVote\": \"Votación General\",\n    \"education.floorVoteDesc\": \"La cámara completa debate y vota\",\n    \"education.startTutorial\": \"Iniciar Tutorial Interactivo\",\n    \"education.testKnowledge\": \"Prueba tu Conocimiento\",\n    \"education.quiz\": \"Quiz Rápido: Conceptos Básicos Legislativos\",\n    \"education.quizQuestion\": \"¿Cuántos votos se necesitan para anular un veto presidencial?\",\n    \"education.quizOptions\": {\n      \"simpleMajority\": \"Mayoría simple (51%)\",\n      \"twoThirds\": \"Mayoría de dos tercios (67%)\",\n      \"threeQuarters\": \"Mayoría de tres cuartos (75%)\"\n    },\n    \"education.submitAnswer\": \"Enviar Respuesta\",\n    \"education.takeFullQuiz\": \"Tomar Quiz Completo\",\n\n    // Common\n    \"common.loading\": \"Cargando...\",\n    \"common.error\": \"Ocurrió un error\",\n    \"common.retry\": \"Reintentar\",\n    \"common.close\": \"Cerrar\",\n    \"common.save\": \"Guardar\",\n    \"common.cancel\": \"Cancelar\",\n    \"common.delete\": \"Eliminar\",\n    \"common.edit\": \"Editar\",\n    \"common.view\": \"Ver\",\n    \"common.search\": \"Buscar\",\n    \"common.filter\": \"Filtrar\",\n    \"common.sort\": \"Ordenar\",\n    \"common.date\": \"Fecha\",\n    \"common.category\": \"Categoría\",\n    \"common.status\": \"Estado\",\n    \"common.source\": \"Fuente\",\n    \"common.author\": \"Autor\",\n    \"common.updated\": \"Actualizado\",\n    \"common.created\": \"Creado\",\n  }\n};\n\n// Helper type for nested object paths\ntype NestedKeyOf<ObjectType extends object> = {\n  [Key in keyof ObjectType & (string | number)]: ObjectType[Key] extends object\n    ? `${Key}` | `${Key}.${NestedKeyOf<ObjectType[Key]>}`\n    : `${Key}`;\n}[keyof ObjectType & (string | number)];\n\nexport type TranslationKey = NestedKeyOf<typeof translations.en>;\nexport type Language = keyof typeof translations;\n","size_bytes":11911},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/community-feedback.tsx":{"content":"import { CommunityFeedback } from \"@/components/community-feedback\";\n\nexport default function CommunityFeedbackPage() {\n  return <CommunityFeedback />;\n}","size_bytes":153},"client/src/pages/community-polls.tsx":{"content":"import { SimplePolls } from \"@/components/simple-polls\";\n\nexport default function CommunityPollsPage() {\n  return <SimplePolls />;\n}","size_bytes":132},"client/src/pages/home.tsx":{"content":"import Header from \"@/components/header\";\nimport BillBrowser from \"@/components/bill-browser\";\nimport NewsAggregator from \"@/components/news-aggregator\";\nimport CivicaChatbot from \"@/components/civica-chatbot\";\nimport LegislatorTracker from \"@/components/legislator-tracker\";\nimport CivicEngagement from \"@/components/civic-engagement\";\nimport CongressionalDistrictsMap from \"@/components/congressional-districts-map\";\nimport CivicEducation from \"@/components/civic-education\";\nimport Footer from \"@/components/footer\";\nimport React from \"react\";\nimport { useSimpleTranslation } from \"@/hooks/use-simple-translation\";\nimport { useLocation } from \"@/hooks/use-location\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, TrendingUp, Clock, Users, Vote, MessageSquare, Languages, Loader2 } from \"lucide-react\";\nimport LocationSelector from \"@/components/location-selector\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const { currentLanguage, toggleLanguage, t } = useSimpleTranslation();\n  const { location, detectLocation, loading } = useLocation();\n\n  // Simple translation system - no loading needed\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n\n      \n      <Header />\n      \n      {/* Main Navigation */}\n      <nav className=\"bg-card border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex space-x-8 overflow-x-auto\">\n              <a href=\"#bills\" className=\"whitespace-nowrap py-4 px-1 border-b-2 border-primary font-medium text-sm text-primary\">\n                {t(\"Recent Bills\")}\n              </a>\n              <a href=\"#news\" className=\"whitespace-nowrap py-4 px-1 border-b-2 border-transparent font-medium text-sm text-muted-foreground hover:text-foreground hover:border-border\">\n                {t(\"Breaking News\")}\n              </a>\n              <a href=\"#legislators\" className=\"whitespace-nowrap py-4 px-1 border-b-2 border-transparent font-medium text-sm text-muted-foreground hover:text-foreground hover:border-border\">\n                {t(\"Your Representatives\")}\n              </a>\n              <Link href=\"/community/polls\" className=\"whitespace-nowrap py-4 px-1 border-b-2 border-transparent font-medium text-sm text-muted-foreground hover:text-foreground hover:border-border flex items-center gap-1\">\n                <Vote className=\"w-4 h-4\" />\n                {t(\"Community Polls\")}\n              </Link>\n              <Link href=\"/community/feedback\" className=\"whitespace-nowrap py-4 px-1 border-b-2 border-transparent font-medium text-sm text-muted-foreground hover:text-foreground hover:border-border flex items-center gap-1\">\n                <MessageSquare className=\"w-4 h-4\" />\n                {t(\"Give Feedback\")}\n              </Link>\n              <a href=\"#engage\" className=\"whitespace-nowrap py-4 px-1 border-b-2 border-transparent font-medium text-sm text-muted-foreground hover:text-foreground hover:border-border\">\n                {t(\"Engage\")}\n              </a>\n              <a href=\"#education\" className=\"whitespace-nowrap py-4 px-1 border-b-2 border-transparent font-medium text-sm text-muted-foreground hover:text-foreground hover:border-border\">\n                {t(\"Learn\")}\n              </a>\n            </div>\n            \n            {/* Language Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleLanguage}\n              className=\"ml-4 flex items-center gap-2\"\n            >\n              <Languages className=\"w-4 h-4\" />\n              {currentLanguage === 'en' ? 'ES' : 'EN'}\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-to-br from-blue-600 via-blue-700 to-indigo-800 text-white py-16 overflow-hidden\">\n        {/* Civic illustration background */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <svg className=\"absolute right-0 top-0 h-full w-auto\" viewBox=\"0 0 400 300\" fill=\"currentColor\">\n            <path d=\"M200 50 L120 100 L120 250 L280 250 L280 100 Z M200 70 L240 90 L240 230 L160 230 L160 90 Z M180 120 L220 120 L220 140 L180 140 Z M180 160 L220 160 L220 180 L180 180 Z M180 200 L220 200 L220 220 L180 220 Z\" />\n          </svg>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            {/* Main headline */}\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-4 tracking-tight\">\n              {t(\"Stay Connected to Your Democracy\")}\n            </h1>\n            \n            {/* Subheadline */}\n            <p className=\"text-lg md:text-xl text-blue-100 mb-8 max-w-3xl mx-auto font-light leading-relaxed\">\n              {t(\"Track legislation, understand complex bills with AI assistance, and engage with your representatives—all in English and Spanish.\")}\n            </p>\n            \n            {/* Location Input */}\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-full p-1 max-w-md mx-auto mb-8 border border-white/20\">\n              <div className=\"flex items-center px-4 py-3\">\n                <MapPin className=\"w-5 h-5 text-blue-200 mr-3 flex-shrink-0\" />\n                <div className=\"flex-1 text-left\">\n                  <div className=\"text-white font-medium\">\n                    {location.city && location.state ? (\n                      `${location.city}, ${location.state}`\n                    ) : (\n                      \"San Antonio, Texas\"\n                    )}\n                  </div>\n                  <div className=\"text-blue-200 text-sm\">\n                    {location.district || \"District TX-23\"}\n                  </div>\n                </div>\n                <Button \n                  onClick={detectLocation}\n                  disabled={loading}\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  className=\"ml-3 bg-white/20 hover:bg-white/30 text-white border-none rounded-full px-4\"\n                >\n                  {loading ? \"Updating...\" : \"Update Location\"}\n                </Button>\n              </div>\n            </div>\n\n            {/* Call to Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n              <Button \n                size=\"lg\"\n                className=\"bg-orange-500 hover:bg-orange-600 text-white font-semibold px-8 py-3 rounded-full shadow-lg hover:shadow-xl transition-all duration-200\"\n                onClick={() => document.getElementById('bills')?.scrollIntoView({ behavior: 'smooth' })}\n              >\n                {t(\"Explore Bills\")}\n              </Button>\n              <Button \n                size=\"lg\"\n                variant=\"outline\"\n                className=\"border-2 border-white text-blue-600 bg-white hover:bg-blue-50 font-semibold px-8 py-3 rounded-full transition-all duration-200\"\n                onClick={() => window.open('https://www.youtube.com/watch?v=Otbml6WIQPo', '_blank')}\n              >\n                {t(\"Learn How It Works\")}\n              </Button>\n            </div>\n\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-200 group\">\n                <div className=\"flex items-center justify-center w-16 h-16 bg-green-500 rounded-2xl mx-auto mb-4 group-hover:scale-110 transition-transform duration-200\">\n                  <TrendingUp className=\"w-8 h-8 text-white\" />\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">1,247</div>\n                <div className=\"text-blue-200 font-medium\">{t(\"Active Bills\")}</div>\n              </div>\n              \n              <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-200 group\">\n                <div className=\"flex items-center justify-center w-16 h-16 bg-yellow-500 rounded-2xl mx-auto mb-4 group-hover:scale-110 transition-transform duration-200\">\n                  <Clock className=\"w-8 h-8 text-white\" />\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">89</div>\n                <div className=\"text-blue-200 font-medium\">{t(\"Recent Updates\")}</div>\n              </div>\n              \n              <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20 hover:bg-white/15 transition-all duration-200 group\">\n                <div className=\"flex items-center justify-center w-16 h-16 bg-purple-500 rounded-2xl mx-auto mb-4 group-hover:scale-110 transition-transform duration-200\">\n                  <Users className=\"w-8 h-8 text-white\" />\n                </div>\n                <div className=\"text-3xl font-bold mb-2\">23</div>\n                <div className=\"text-blue-200 font-medium\">{t(\"Local Bills\")}</div>\n              </div>\n            </div>\n\n            {/* Language Support Indicator */}\n            <div className=\"mt-8 text-blue-200 text-sm\">\n              {t(\"Available in English and Spanish\")} • Disponible en inglés y español\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Community Features Showcase */}\n      <section className=\"py-12 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">{t(\"Join the Community\")}</h3>\n            <p className=\"text-gray-600 dark:text-gray-300\">{t(\"Make your voice heard on important issues in TX-23\")}</p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <Link href=\"/community/polls\" className=\"group\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md hover:shadow-lg transition-shadow duration-200\">\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <div className=\"flex items-center justify-center w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-full group-hover:bg-blue-200 dark:group-hover:bg-blue-900/50 transition-colors\">\n                    <Vote className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  <div>\n                    <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{t(\"Community Polls\")}</h4>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">{t(\"Vote on local issues\")}</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  {t(\"Share your opinion on healthcare, infrastructure, border security, and other key issues affecting our district.\")}\n                </p>\n                <div className=\"text-sm text-blue-600 dark:text-blue-400 font-medium group-hover:text-blue-700 dark:group-hover:text-blue-300\">\n                  {t(\"View Active Polls\")} →\n                </div>\n              </div>\n            </Link>\n            \n            <Link href=\"/community/feedback\" className=\"group\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-md hover:shadow-lg transition-shadow duration-200\">\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <div className=\"flex items-center justify-center w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full group-hover:bg-green-200 dark:group-hover:bg-green-900/50 transition-colors\">\n                    <MessageSquare className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <div>\n                    <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{t(\"Community Feedback\")}</h4>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">{t(\"Share your concerns\")}</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                  {t(\"Submit feedback about local issues, suggest improvements, and see responses from your representatives.\")}\n                </p>\n                <div className=\"text-sm text-green-600 dark:text-green-400 font-medium group-hover:text-green-700 dark:group-hover:text-green-300\">\n                  {t(\"Submit Feedback\")} →\n                </div>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <BillBrowser />\n        <NewsAggregator />\n        <CivicaChatbot />\n        <CongressionalDistrictsMap />\n        <LegislatorTracker />\n        <CivicEngagement />\n        <CivicEducation />\n      </main>\n\n      <Footer />\n\n      {/* Floating Chat Button */}\n      <Button\n        className=\"fixed bottom-6 right-6 w-14 h-14 rounded-full shadow-lg hover:shadow-xl z-40\"\n        size=\"icon\"\n        onClick={() => {\n          const chatSection = document.getElementById(\"civica-chat\");\n          chatSection?.scrollIntoView({ behavior: \"smooth\" });\n        }}\n      >\n        <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n          <path d=\"M12 2C6.48 2 2 6.48 2 12c0 1.54.36 2.98.97 4.29L1 23l6.71-1.97C9.02 21.64 10.46 22 12 22c5.52 0 10-4.48 10-10S17.52 2 12 2zm0 18c-1.38 0-2.69-.28-3.88-.78L7 20l.78-1.12C7.28 17.69 7 16.38 7 15c0-4.41 3.59-8 8-8s8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z\"/>\n        </svg>\n      </Button>\n    </div>\n  );\n}\n","size_bytes":13808},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/language-toggle.tsx":{"content":"import { useTranslation } from \"@/hooks/use-translation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Languages } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function LanguageToggle() {\n  const { language, changeLanguage } = useTranslation();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\">\n          <Languages className=\"h-[1.2rem] w-[1.2rem]\" />\n          <span className=\"sr-only\">Toggle language</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem \n          onClick={() => changeLanguage(\"en\")}\n          className={language === \"en\" ? \"bg-accent\" : \"\"}\n        >\n          English\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => changeLanguage(\"es\")}\n          className={language === \"es\" ? \"bg-accent\" : \"\"}\n        >\n          Español\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1123},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/timeline.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { CheckCircle, Clock } from \"lucide-react\";\n\ninterface TimelineProps {\n  progress: {\n    introduced: boolean;\n    committee: boolean;\n    passed_house?: boolean;\n    passed_senate?: boolean;\n    signed?: boolean;\n  };\n  className?: string;\n}\n\nexport function Timeline({ progress, className }: TimelineProps) {\n  const steps = [\n    { key: \"introduced\", label: \"Introduced\", completed: progress.introduced },\n    { key: \"committee\", label: \"Committee\", completed: progress.committee },\n    { key: \"passed_house\", label: \"House\", completed: progress.passed_house || false },\n    { key: \"passed_senate\", label: \"Senate\", completed: progress.passed_senate || false },\n    { key: \"signed\", label: \"Signed\", completed: progress.signed || false },\n  ];\n\n  const getStepStatus = (step: any, index: number) => {\n    if (step.completed) return \"completed\";\n    \n    // Find the first incomplete step\n    const firstIncomplete = steps.findIndex(s => !s.completed);\n    if (index === firstIncomplete) return \"current\";\n    \n    return \"pending\";\n  };\n\n  return (\n    <div className={cn(\"bg-muted rounded-lg p-4\", className)}>\n      <h5 className=\"text-sm font-medium mb-3\">Bill Progress</h5>\n      <div className=\"flex items-center justify-between\">\n        {steps.map((step, index) => {\n          const status = getStepStatus(step, index);\n          const isLast = index === steps.length - 1;\n          \n          return (\n            <div key={step.key} className=\"flex items-center flex-1\">\n              <div className=\"flex flex-col items-center\">\n                <div className={cn(\n                  \"w-3 h-3 rounded-full flex items-center justify-center\",\n                  status === \"completed\" && \"bg-green-600\",\n                  status === \"current\" && \"bg-yellow-600\",\n                  status === \"pending\" && \"bg-gray-300 dark:bg-gray-600\"\n                )}>\n                  {status === \"completed\" && <div className=\"w-1.5 h-1.5 bg-white rounded-full\" />}\n                  {status === \"current\" && <div className=\"w-1.5 h-1.5 bg-white rounded-full\" />}\n                </div>\n                <span className={cn(\n                  \"text-xs mt-1 text-center\",\n                  status === \"completed\" && \"text-green-600 font-medium\",\n                  status === \"current\" && \"text-yellow-600 font-medium\",\n                  status === \"pending\" && \"text-muted-foreground\"\n                )}>\n                  {step.label}\n                </span>\n              </div>\n              \n              {!isLast && (\n                <div className={cn(\n                  \"flex-1 h-0.5 mx-2\",\n                  steps[index + 1].completed || status === \"completed\" \n                    ? \"bg-green-600\" \n                    : \"bg-gray-300 dark:bg-gray-600\"\n                )} />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2913},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/services/translation.ts":{"content":"// Simple client-side translation using Google Translate\n// No API key needed for basic functionality\n\nexport interface TranslationRequest {\n  content: string;\n  targetLanguage: 'es' | 'en';\n  context?: string;\n}\n\nexport interface TranslationResponse {\n  translatedContent: string;\n  sourceLanguage: string;\n  targetLanguage: string;\n}\n\nexport class TranslationService {\n  async translatePageContent(request: TranslationRequest): Promise<TranslationResponse> {\n    const { content, targetLanguage } = request;\n    \n    try {\n      // Simple approach - use Google Translate iframe or prepare content for client-side translation\n      // For now, return simple static translations for key components\n      const staticTranslations = this.getStaticTranslations(targetLanguage);\n      \n      let translatedContent = content;\n      \n      // Replace common English phrases with Spanish equivalents\n      if (targetLanguage === 'es') {\n        Object.entries(staticTranslations.en_to_es).forEach(([english, spanish]) => {\n          translatedContent = translatedContent.replace(new RegExp(english, 'gi'), spanish);\n        });\n      } else {\n        Object.entries(staticTranslations.es_to_en).forEach(([spanish, english]) => {\n          translatedContent = translatedContent.replace(new RegExp(spanish, 'gi'), english);\n        });\n      }\n\n      return {\n        translatedContent,\n        sourceLanguage: targetLanguage === 'es' ? 'en' : 'es',\n        targetLanguage,\n      };\n    } catch (error) {\n      console.error(\"Translation error:\", error);\n      throw new Error(\"Failed to translate content\");\n    }\n  }\n\n  private getStaticTranslations(targetLanguage: 'es' | 'en') {\n    return {\n      en_to_es: {\n        \"Your Representatives\": \"Sus Representantes\",\n        \"Recent Bills\": \"Proyectos de Ley Recientes\", \n        \"Breaking News\": \"Últimas Noticias\",\n        \"Community Polls\": \"Encuestas de la Comunidad\",\n        \"Contact\": \"Contactar\",\n        \"Learn More\": \"Aprende Más\",\n        \"Party\": \"Partido\",\n        \"Years in Office\": \"Años en el Cargo\",\n        \"Bills Sponsored\": \"Proyectos Patrocinados\",\n        \"Recent Activity\": \"Actividad Reciente\",\n        \"Vote\": \"Votar\",\n        \"Results\": \"Resultados\", \n        \"Healthcare\": \"Atención Médica\",\n        \"Infrastructure\": \"Infraestructura\",\n        \"Border Security\": \"Seguridad Fronteriza\",\n        \"Education\": \"Educación\",\n        \"Economy\": \"Economía\",\n        \"Environment\": \"Medio Ambiente\",\n        \"Share your opinion\": \"Comparte tu opinión\",\n        \"All\": \"Todos\",\n        \"Local\": \"Local\",\n        \"State\": \"Estado\",\n        \"National\": \"Nacional\",\n        \"No polls available\": \"No hay encuestas disponibles\",\n        \"There are no active polls\": \"No hay encuestas activas\"\n      },\n      es_to_en: {\n        \"Sus Representantes\": \"Your Representatives\",\n        \"Proyectos de Ley Recientes\": \"Recent Bills\",\n        \"Últimas Noticias\": \"Breaking News\", \n        \"Encuestas de la Comunidad\": \"Community Polls\",\n        \"Contactar\": \"Contact\",\n        \"Aprende Más\": \"Learn More\",\n        \"Partido\": \"Party\",\n        \"Años en el Cargo\": \"Years in Office\",\n        \"Proyectos Patrocinados\": \"Bills Sponsored\",\n        \"Actividad Reciente\": \"Recent Activity\",\n        \"Votar\": \"Vote\",\n        \"Resultados\": \"Results\",\n        \"Atención Médica\": \"Healthcare\",\n        \"Infraestructura\": \"Infrastructure\", \n        \"Seguridad Fronteriza\": \"Border Security\",\n        \"Educación\": \"Education\",\n        \"Economía\": \"Economy\",\n        \"Medio Ambiente\": \"Environment\",\n        \"Comparte tu opinión\": \"Share your opinion\",\n        \"Todos\": \"All\",\n        \"Local\": \"Local\",\n        \"Estado\": \"State\",\n        \"Nacional\": \"National\",\n        \"No hay encuestas disponibles\": \"No polls available\",\n        \"No hay encuestas activas\": \"There are no active polls\"\n      }\n    };\n  }\n\n  async translateBulkContent(items: Array<{id: string, content: string}>, targetLanguage: 'es' | 'en'): Promise<Array<{id: string, translatedContent: string}>> {\n    const results = [];\n    \n    // Process in batches to avoid rate limits\n    for (const item of items) {\n      try {\n        const result = await this.translatePageContent({\n          content: item.content,\n          targetLanguage,\n          context: \"civic engagement platform content\"\n        });\n        \n        results.push({\n          id: item.id,\n          translatedContent: result.translatedContent\n        });\n        \n        // Small delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100));\n      } catch (error) {\n        console.error(`Translation failed for item ${item.id}:`, error);\n        results.push({\n          id: item.id,\n          translatedContent: item.content // Fallback to original\n        });\n      }\n    }\n    \n    return results;\n  }\n}\n\nexport const translationService = new TranslationService();","size_bytes":4891},"client/src/hooks/use-simple-translation.ts":{"content":"import { useState, useCallback, useEffect } from \"react\";\n\nexport type Language = \"en\" | \"es\";\n\n// Complete translation mappings for the entire site\nconst translations: Record<string, string> = {\n  // Navigation\n  \"Recent Bills\": \"Proyectos de Ley Recientes\",\n  \"Breaking News\": \"Últimas Noticias\",\n  \"Your Representatives\": \"Sus Representantes\", \n  \"Community Polls\": \"Encuestas de la Comunidad\",\n  \"Give Feedback\": \"Dar Comentarios\",\n  \"Engage\": \"Participar\",\n  \"Learn\": \"Aprender\",\n  \n  // Hero section\n  \"Connected Civics\": \"Cívicos Conectados\",\n  \"Your Voice in TX-23\": \"Tu Voz en TX-23\",\n  \"Stay Connected to Your Democracy\": \"Manténgase Conectado a Su Democracia\",\n  \"Track legislation, understand complex bills with AI assistance, and engage with your representatives—all in English and Spanish.\": \"Rastree la legislación, comprenda proyectos de ley complejos con asistencia de IA y participe con sus representantes, todo en inglés y español.\",\n  \"Explore Bills\": \"Explorar Proyectos\",\n  \"Learn How It Works\": \"Aprenda Cómo Funciona\",\n  \n  // Bills section\n  \"Filter Bills\": \"Filtrar Proyectos\",\n  \"Search bills...\": \"Buscar proyectos...\",\n  \"Active\": \"Activo\",\n  \"Passed\": \"Aprobado\", \n  \"Failed\": \"Fallido\",\n  \"Category\": \"Categoría\",\n  \"All Categories\": \"Todas las Categorías\",\n  \"Jurisdiction\": \"Jurisdicción\",\n  \"All Levels\": \"Todos los Niveles\",\n  \"Federal\": \"Federal\",\n  \"State\": \"Estatal\",\n  \"Clear Filters\": \"Limpiar Filtros\",\n  \"Most Recent\": \"Más Recientes\",\n  \"PASSED HOUSE\": \"APROBADO EN CÁMARA\",\n  \"IN COMMITTEE\": \"EN COMITÉ\",\n  \"Bill Progress\": \"Progreso del Proyecto\",\n  \"Ask AI\": \"Preguntar a IA\",\n  \"Save\": \"Guardar\",\n  \"Share\": \"Compartir\",\n  \"View Details\": \"Ver Detalles\",\n  \"Load More Bills\": \"Cargar Más Proyectos\",\n  \n  // News section  \n  \"Civic News\": \"Noticias Cívicas\",\n  \"Local\": \"Local\",\n  \"National\": \"Nacional\",\n  \"Explainer\": \"Explicativo\",\n  \"BREAKING\": \"ÚLTIMA HORA\",\n  \"Read More\": \"Leer Más\",\n  \"More Info\": \"Más Información\",\n  \n  // Representatives\n  \"Party\": \"Partido\",\n  \"Republican\": \"Republicano\",\n  \"Democrat\": \"Demócrata\",\n  \"Years in Office\": \"Años en el Cargo\",\n  \"Bills Sponsored\": \"Proyectos Patrocinados\",\n  \"Recent Activity\": \"Actividad Reciente\",\n  \"Voted Yes on\": \"Votó Sí en\",\n  \"Sponsored on\": \"Patrocinó\",\n  \"No recent activity\": \"Sin actividad reciente\",\n  \n  // Civic Education\n  \"Civic Education\": \"Educación Cívica\",\n  \"How a Bill Becomes Law\": \"Cómo un Proyecto se Convierte en Ley\",\n  \"Introduction\": \"Introducción\",\n  \"Bill is introduced in House or Senate\": \"El proyecto se presenta en la Cámara o el Senado\",\n  \"Committee Review\": \"Revisión del Comité\",\n  \"Committee studies and marks up bill\": \"El comité estudia y marca el proyecto\",\n  \"Floor Vote\": \"Votación General\",\n  \"Full chamber debates and votes\": \"La cámara completa debate y vota\",\n  \"Senate Vote\": \"Votación del Senado\",\n  \"Senate debates and votes on the bill\": \"El Senado debate y vota sobre el proyecto\",\n  \"Presidential Action\": \"Acción Presidencial\",\n  \"President signs or vetoes the bill\": \"El presidente firma o veta el proyecto\",\n  \"Watch Official Tutorial\": \"Ver Tutorial Oficial\",\n  \"Test Your Knowledge\": \"Pon a Prueba tu Conocimiento\",\n  \"Quick Quiz: Legislative Basics\": \"Cuestionario Rápido: Conceptos Básicos Legislativos\",\n  \"How many votes are needed to override a presidential veto?\": \"¿Cuántos votos se necesitan para anular un veto presidencial?\",\n  \"Simple Majority (51%)\": \"Mayoría Simple (51%)\",\n  \"Two-Thirds Majority (67%)\": \"Mayoría de Dos Tercios (67%)\",\n  \"Three-Quarters Majority (75%)\": \"Mayoría de Tres Cuartos (75%)\",\n  \"Submit Answer\": \"Enviar Respuesta\",\n  \"Take Full Quiz\": \"Tomar Cuestionario Completo\",\n  \n  // Take Action\n  \"Take Action\": \"Tomar Acción\",\n  \"Contact Your Reps\": \"Contacta a tus Representantes\",\n  \"Generate personalized letters to your representatives about important legislation.\": \"Genera cartas personalizadas a tus representantes sobre legislación importante.\",\n  \"Select a bill to discuss\": \"Selecciona un proyecto para discutir\",\n  \"Generate Template\": \"Generar Plantilla\",\n  \"Upcoming Events\": \"Próximos Eventos\",\n  \"Find town halls, city council meetings, and other civic events in your area.\": \"Encuentra ayuntamientos, reuniones del consejo municipal y otros eventos cívicos en tu área.\",\n  \"No upcoming events found\": \"No se encontraron eventos próximos\",\n  \"Check back soon for new civic events\": \"Vuelve pronto para nuevos eventos cívicos\",\n  \"View All Events\": \"Ver Todos los Eventos\",\n  \"Voter Information\": \"Información del Votante\",\n  \"Check your registration status, find polling locations, and get important voting dates.\": \"Verifica tu estado de registro, encuentra lugares de votación y obtén fechas importantes de votación.\",\n  \"Next Election\": \"Próxima Elección\",\n  \"days\": \"días\",\n  \"Check Registration Status\": \"Verificar Estado de Registro\",\n  \n  // AI Assistant\n  \"Meet Civica\": \"Conoce a Cívica\",\n  \"Your AI assistant for understanding legislation\": \"Tu asistente de IA para entender la legislación\",\n  \"Hello! I'm Civica, your AI assistant for understanding legislation. I can help explain bills, their impacts, and answer questions about the legislative process. What would you like to know?\": \"¡Hola! Soy Cívica, tu asistente de IA para entender la legislación. Puedo ayudar a explicar proyectos, sus impactos y responder preguntas sobre el proceso legislativo. ¿Qué te gustaría saber?\",\n  \"Ask me anything about legislation...\": \"Pregúntame cualquier cosa sobre legislación...\",\n  \"How does a bill become a law?\": \"¿Cómo se convierte un proyecto en ley?\",\n  \"What's happening locally?\": \"¿Qué está pasando localmente?\",\n  \"Explain a bill\": \"Explicar un proyecto\",\n  \n  // Community\n  \"Join the Community\": \"Únete a la Comunidad\",\n  \"Make your voice heard on important issues in TX-23\": \"Haz escuchar tu voz en temas importantes en TX-23\",\n  \"Vote on local issues\": \"Vota en temas locales\",\n  \"View Active Polls\": \"Ver Encuestas Activas\",\n  \"Community Feedback\": \"Comentarios de la Comunidad\",\n  \"Share your concerns\": \"Comparte tus preocupaciones\",\n  \"Submit Feedback\": \"Enviar Comentarios\",\n  \"Vote\": \"Votar\",\n  \"Results\": \"Resultados\",\n  \n  // Common terms\n  \"Status\": \"Estado\",\n  \"Summary\": \"Resumen\", \n  \"Sponsor\": \"Patrocinador\",\n  \"Published\": \"Publicado\",\n  \"Source\": \"Fuente\",\n  \"Updated\": \"Actualizado\",\n  \"Search\": \"Buscar\",\n  \"All\": \"Todos\",\n  \"District\": \"Distrito\",\n  \"Office\": \"Oficina\",\n  \"Email\": \"Correo electrónico\",\n  \"Website\": \"Sitio web\",\n  \"Phone\": \"Teléfono\",\n  \n  // Bill content translations\n  \"American Innovation and Manufacturing Act of 2025\": \"Ley de Innovación y Manufactura Estadounidense de 2025\",\n  \"Comprehensive legislation to strengthen domestic manufacturing, support emerging technologies, and create jobs in clean energy sectors.\": \"Legislación integral para fortalecer la manufactura doméstica, apoyar tecnologías emergentes y crear empleos en sectores de energía limpia.\",\n  \"Healthcare Access and Affordability Act of 2025\": \"Ley de Acceso y Asequibilidad de Atención Médica de 2025\",\n  \"Comprehensive healthcare reform to reduce prescription drug costs, expand coverage options, and improve access to mental health services.\": \"Reforma integral de atención médica para reducir costos de medicamentos recetados, expandir opciones de cobertura y mejorar el acceso a servicios de salud mental.\",\n  \"jobs\": \"empleos\",\n  \"technology\": \"tecnología\", \n  \"manufacturing\": \"manufactura\",\n  \"healthcare\": \"atención médica\",\n  \"education\": \"educación\",\n  \"infrastructure\": \"infraestructura\",\n  \"environment\": \"medio ambiente\",\n  \"economy\": \"economía\",\n  \"security\": \"seguridad\",\n  \"veterans\": \"veteranos\",\n  \"immigration\": \"inmigración\",\n  \"energy\": \"energía\",\n  \"agriculture\": \"agricultura\",\n  \"transportation\": \"transporte\",\n  \"housing\": \"vivienda\",\n  \n  // Congressional Districts Map\n  \"Congressional Districts\": \"Distritos Congresionales\",\n  \"Explore interactive map of US congressional districts and representatives\": \"Explora el mapa interactivo de distritos congresionales de EE.UU. y representantes\",\n  \"Interactive Map\": \"Mapa Interactivo\",\n  \"Loading map data...\": \"Cargando datos del mapa...\",\n  \"District Information\": \"Información del Distrito\",\n  \"Congressional District\": \"Distrito Congresional\",\n  \"Representative\": \"Representante\",\n  \"Population\": \"Población\",\n  \"Area\": \"Área\",\n  \"View Representative Details\": \"Ver Detalles del Representante\",\n  \"Click on a district to view details\": \"Haz clic en un distrito para ver detalles\",\n  \"Legend\": \"Leyenda\",\n  \"Independent\": \"Independiente\",\n  \"Search district or representative...\": \"Buscar distrito o representante...\",\n  \"Contact\": \"Contacto\",\n  \"Official Website\": \"Sitio Web Oficial\",\n  \"Visit Official Website\": \"Visitar Sitio Web Oficial\",\n  \"View Sponsored Bills\": \"Ver Proyectos de Ley Patrocinados\",\n  \"Interactive GovTrack Map\": \"Mapa Interactivo de GovTrack\",\n  \"More Info\": \"Más Información\"\n};\n\nexport function useSimpleTranslation() {\n  const [currentLanguage, setCurrentLanguage] = useState<Language>(() => {\n    const saved = localStorage.getItem(\"preferredLanguage\");\n    return (saved as Language) || \"en\";\n  });\n\n  const translateText = useCallback((text: string): string => {\n    if (currentLanguage === \"en\") return text;\n    return translations[text] || text;\n  }, [currentLanguage]);\n\n  const translatePage = useCallback(() => {\n    if (currentLanguage === \"es\") {\n      // Get all text nodes in the document\n      const walker = document.createTreeWalker(\n        document.body,\n        NodeFilter.SHOW_TEXT,\n        null\n      );\n\n      const textNodes: Text[] = [];\n      let node;\n      while (node = walker.nextNode()) {\n        const parent = node.parentElement;\n        // Skip script, style, and input elements\n        if (parent && !['SCRIPT', 'STYLE', 'INPUT', 'TEXTAREA'].includes(parent.tagName)) {\n          if (node.textContent && node.textContent.trim().length > 0) {\n            textNodes.push(node as Text);\n          }\n        }\n      }\n\n      // Translate each text node\n      textNodes.forEach(textNode => {\n        if (textNode.textContent) {\n          let translated = textNode.textContent;\n          \n          // Apply exact phrase translations first\n          Object.entries(translations).forEach(([english, spanish]) => {\n            if (translated.includes(english)) {\n              translated = translated.replaceAll(english, spanish);\n            }\n          });\n          \n          // Apply word-by-word translations for individual words\n          Object.entries(translations).forEach(([english, spanish]) => {\n            if (english.split(' ').length === 1) { // Single words only\n              const regex = new RegExp(`\\\\b${english.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'gi');\n              translated = translated.replace(regex, spanish);\n            }\n          });\n          \n          if (translated !== textNode.textContent) {\n            textNode.textContent = translated;\n          }\n        }\n      });\n\n      // Also translate placeholder attributes\n      const inputs = document.querySelectorAll('input[placeholder], textarea[placeholder]');\n      inputs.forEach(input => {\n        const placeholder = input.getAttribute('placeholder');\n        if (placeholder && translations[placeholder]) {\n          input.setAttribute('placeholder', translations[placeholder]);\n        }\n      });\n    }\n  }, [currentLanguage]);\n\n  const toggleLanguage = useCallback(() => {\n    const newLanguage = currentLanguage === \"en\" ? \"es\" : \"en\";\n    setCurrentLanguage(newLanguage);\n    localStorage.setItem(\"preferredLanguage\", newLanguage);\n    \n    if (newLanguage === \"es\") {\n      // Translate immediately and then again after content loads\n      setTimeout(translatePage, 50);\n      setTimeout(translatePage, 500);\n      setTimeout(translatePage, 1000);\n      setTimeout(translatePage, 2000);\n    } else {\n      // Reload page to reset to English\n      window.location.reload();\n    }\n  }, [currentLanguage, translatePage]);\n\n  // Auto-translate on load if Spanish is selected\n  useEffect(() => {\n    if (currentLanguage === \"es\") {\n      setTimeout(translatePage, 500);\n    }\n  }, [currentLanguage, translatePage]);\n\n  return {\n    currentLanguage,\n    toggleLanguage,\n    t: translateText\n  };\n}","size_bytes":12377}}}